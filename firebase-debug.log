[debug] [2025-10-21T00:50:50.143Z] ----------------------------------------------------------------------
[debug] [2025-10-21T00:50:50.144Z] Command:       /home/dachu/.nvm/versions/node/v22.20.0/bin/node /home/dachu/.nvm/versions/node/v22.20.0/bin/firebase deploy --only firestore:indexes
[debug] [2025-10-21T00:50:50.144Z] CLI Version:   14.20.0
[debug] [2025-10-21T00:50:50.145Z] Platform:      linux
[debug] [2025-10-21T00:50:50.145Z] Node Version:  v22.20.0
[debug] [2025-10-21T00:50:50.145Z] Time:          Tue Oct 21 2025 02:50:50 GMT+0200 (Central Africa Time)
[debug] [2025-10-21T00:50:50.145Z] ----------------------------------------------------------------------
[debug] 
[error] 
[error] Error: No currently active project.
To run this command, you need to specify a project. You have two options:
- Run this command with --project <alias_or_project_id>.
- Set an active project by running firebase use --add, then rerun this command.
To list all the Firebase projects to which you have access, run firebase projects:list.
To learn about active projects for the CLI, visit https://firebase.google.com/docs/cli#project_aliases


[debug] [2025-10-21T00:51:02.742Z] ----------------------------------------------------------------------
[debug] [2025-10-21T00:51:02.744Z] Command:       /home/dachu/.nvm/versions/node/v22.20.0/bin/node /home/dachu/.nvm/versions/node/v22.20.0/bin/firebase projects:list
[debug] [2025-10-21T00:51:02.745Z] CLI Version:   14.20.0
[debug] [2025-10-21T00:51:02.745Z] Platform:      linux
[debug] [2025-10-21T00:51:02.745Z] Node Version:  v22.20.0
[debug] [2025-10-21T00:51:02.745Z] Time:          Tue Oct 21 2025 02:51:02 GMT+0200 (Central Africa Time)
[debug] [2025-10-21T00:51:02.745Z] ----------------------------------------------------------------------
[debug] 
[debug] [2025-10-21T00:51:02.892Z] > command requires scopes: ["email","openid","https://www.googleapis.com/auth/cloudplatformprojects.readonly","https://www.googleapis.com/auth/firebase","https://www.googleapis.com/auth/cloud-platform"]
[debug] [2025-10-21T00:51:02.892Z] > authorizing via signed-in user (brpotch@gmail.com)
[debug] [2025-10-21T00:51:02.894Z] Checked if tokens are valid: false, expires at: 1760994646661
[debug] [2025-10-21T00:51:02.894Z] Checked if tokens are valid: false, expires at: 1760994646661
[debug] [2025-10-21T00:51:02.895Z] > refreshing access token with scopes: []
[debug] [2025-10-21T00:51:02.896Z] >>> [apiv2][query] POST https://www.googleapis.com/oauth2/v3/token [none]
[debug] [2025-10-21T00:51:02.896Z] >>> [apiv2][body] POST https://www.googleapis.com/oauth2/v3/token [omitted]
[debug] [2025-10-21T00:51:03.498Z] <<< [apiv2][status] POST https://www.googleapis.com/oauth2/v3/token 200
[debug] [2025-10-21T00:51:03.498Z] <<< [apiv2][body] POST https://www.googleapis.com/oauth2/v3/token [omitted]
[debug] [2025-10-21T00:51:03.512Z] >>> [apiv2][query] GET https://firebase.googleapis.com/v1beta1/projects pageSize=1000
[debug] [2025-10-21T00:51:04.575Z] <<< [apiv2][status] GET https://firebase.googleapis.com/v1beta1/projects 200
[debug] [2025-10-21T00:51:04.575Z] <<< [apiv2][body] GET https://firebase.googleapis.com/v1beta1/projects [omitted]
[info] ┌────────────────────────┬────────────────────────────┬────────────────┬──────────────────────┐
│ Project Display Name   │ Project ID                 │ Project Number │ Resource Location ID │
├────────────────────────┼────────────────────────────┼────────────────┼──────────────────────┤
│ aafricaservices        │ aafricaservices-e8fc9      │ 598521402697   │ [Not specified]      │
├────────────────────────┼────────────────────────────┼────────────────┼──────────────────────┤
│ ACS-Barlog             │ acs-barlog                 │ 282997869000   │ [Not specified]      │
├────────────────────────┼────────────────────────────┼────────────────┼──────────────────────┤
│ AuthentiationFSMS      │ authentiationfsms          │ 1074060692867  │ us-central           │
├────────────────────────┼────────────────────────────┼────────────────┼──────────────────────┤
│ babyshop               │ babyshop-503d5             │ 792065999504   │ us-central           │
├────────────────────────┼────────────────────────────┼────────────────┼──────────────────────┤
│ carDealership          │ cardealership-166f2        │ 1024533202518  │ us-central           │
├────────────────────────┼────────────────────────────┼────────────────┼──────────────────────┤
│ ClientFeedBackApp      │ clientfeedbackapp          │ 600065268382   │ us-central           │
├────────────────────────┼────────────────────────────┼────────────────┼──────────────────────┤
│ envirowize             │ envirowize-fb2cc           │ 574892382143   │ us-central           │
├────────────────────────┼────────────────────────────┼────────────────┼──────────────────────┤
│ FieldProjectManagement │ fieldprojectmanagement     │ 349623256103   │ us-central           │
├────────────────────────┼────────────────────────────┼────────────────┼──────────────────────┤
│ fundo                  │ fundo-17bbf                │ 450819282312   │ [Not specified]      │
├────────────────────────┼────────────────────────────┼────────────────┼──────────────────────┤
│ geminiApp              │ geminiapp-bd4ff            │ 1089476427045  │ [Not specified]      │
├────────────────────────┼────────────────────────────┼────────────────┼──────────────────────┤
│ HACCPadmin             │ haccpadmin                 │ 171382036778   │ us-central           │
├────────────────────────┼────────────────────────────┼────────────────┼──────────────────────┤
│ iClean-Field-Service   │ iclean-field-service-4bddd │ 56483628989    │ us-central           │
├────────────────────────┼────────────────────────────┼────────────────┼──────────────────────┤
│ icleanHome             │ icleanhome                 │ 755937348384   │ [Not specified]      │
├────────────────────────┼────────────────────────────┼────────────────┼──────────────────────┤
│ Mazvita Bakery         │ mazvita-bakery             │ 1017700205592  │ us-central           │
├────────────────────────┼────────────────────────────┼────────────────┼──────────────────────┤
│ myHACCPadmin           │ myhaccpadmin               │ 642824201279   │ us-central           │
├────────────────────────┼────────────────────────────┼────────────────┼──────────────────────┤
│ myhaccpapp-project     │ myhaccpapp-project         │ 1075341676379  │ [Not specified]      │
├────────────────────────┼────────────────────────────┼────────────────┼──────────────────────┤
│ myShopZw               │ myshopzw-c782a             │ 655041340888   │ us-central           │
├────────────────────────┼────────────────────────────┼────────────────┼──────────────────────┤
│ Orlicron BMS           │ orlicron-bms               │ 922912270433   │ us-central           │
├────────────────────────┼────────────────────────────┼────────────────┼──────────────────────┤
│ peakflow               │ peakflow-3a2ed             │ 244374297943   │ [Not specified]      │
├────────────────────────┼────────────────────────────┼────────────────┼──────────────────────┤
│ PnPHACCP               │ pnphaccp                   │ 487628134723   │ us-central           │
├────────────────────────┼────────────────────────────┼────────────────┼──────────────────────┤
│ poka-yoke              │ poka-yoke-aa53f            │ 735938787106   │ us-central           │
├────────────────────────┼────────────────────────────┼────────────────┼──────────────────────┤
│ RetailReach            │ retailreach                │ 588221736503   │ [Not specified]      │
├────────────────────────┼────────────────────────────┼────────────────┼──────────────────────┤
│ taskman                │ taskman-cd635              │ 924371981021   │ us-central           │
├────────────────────────┼────────────────────────────┼────────────────┼──────────────────────┤
│ tsebo                  │ tsebo-4cda1                │ 535587503159   │ us-central           │
├────────────────────────┼────────────────────────────┼────────────────┼──────────────────────┤
│ tsebo-iclean           │ tsebo-iclean               │ 401166197999   │ us-central           │
├────────────────────────┼────────────────────────────┼────────────────┼──────────────────────┤
│ tsebocleaningsurveys   │ tsebocleaningsurveys       │ 597433656352   │ us-central           │
├────────────────────────┼────────────────────────────┼────────────────┼──────────────────────┤
│ tsebomobile            │ tsebomobile                │ 837874789745   │ us-central           │
├────────────────────────┼────────────────────────────┼────────────────┼──────────────────────┤
│ TseboSurveys           │ tsebosurveys               │ 396871158710   │ us-central           │
├────────────────────────┼────────────────────────────┼────────────────┼──────────────────────┤
│ WebApi                 │ webapi-a944f               │ 644129358164   │ us-central           │
└────────────────────────┴────────────────────────────┴────────────────┴──────────────────────┘
[info] 
[info] 29 project(s) total.
[debug] [2025-10-21T00:51:15.896Z] ----------------------------------------------------------------------
[debug] [2025-10-21T00:51:15.897Z] Command:       /home/dachu/.nvm/versions/node/v22.20.0/bin/node /home/dachu/.nvm/versions/node/v22.20.0/bin/firebase use peakflow-3a2ed
[debug] [2025-10-21T00:51:15.898Z] CLI Version:   14.20.0
[debug] [2025-10-21T00:51:15.898Z] Platform:      linux
[debug] [2025-10-21T00:51:15.898Z] Node Version:  v22.20.0
[debug] [2025-10-21T00:51:15.898Z] Time:          Tue Oct 21 2025 02:51:15 GMT+0200 (Central Africa Time)
[debug] [2025-10-21T00:51:15.898Z] ----------------------------------------------------------------------
[debug] 
[debug] [2025-10-21T00:51:16.021Z] > command requires scopes: ["email","openid","https://www.googleapis.com/auth/cloudplatformprojects.readonly","https://www.googleapis.com/auth/firebase","https://www.googleapis.com/auth/cloud-platform"]
[debug] [2025-10-21T00:51:16.022Z] > authorizing via signed-in user (brpotch@gmail.com)
[debug] [2025-10-21T00:51:16.023Z] Checked if tokens are valid: true, expires at: 1761011462499
[debug] [2025-10-21T00:51:16.023Z] Checked if tokens are valid: true, expires at: 1761011462499
[debug] [2025-10-21T00:51:16.024Z] >>> [apiv2][query] GET https://serviceusage.googleapis.com/v1/projects/peakflow-3a2ed/services/cloudresourcemanager.googleapis.com [none]
[debug] [2025-10-21T00:51:16.024Z] >>> [apiv2][(partial)header] GET https://serviceusage.googleapis.com/v1/projects/peakflow-3a2ed/services/cloudresourcemanager.googleapis.com x-goog-quota-user=projects/peakflow-3a2ed
[debug] [2025-10-21T00:51:18.295Z] <<< [apiv2][status] GET https://serviceusage.googleapis.com/v1/projects/peakflow-3a2ed/services/cloudresourcemanager.googleapis.com 200
[debug] [2025-10-21T00:51:18.296Z] <<< [apiv2][body] GET https://serviceusage.googleapis.com/v1/projects/peakflow-3a2ed/services/cloudresourcemanager.googleapis.com [omitted]
[debug] [2025-10-21T00:51:18.305Z] Checked if tokens are valid: true, expires at: 1761011462499
[debug] [2025-10-21T00:51:18.305Z] Checked if tokens are valid: true, expires at: 1761011462499
[debug] [2025-10-21T00:51:18.306Z] >>> [apiv2][query] GET https://cloudresourcemanager.googleapis.com/v1/projects/peakflow-3a2ed [none]
[debug] [2025-10-21T00:51:20.294Z] <<< [apiv2][status] GET https://cloudresourcemanager.googleapis.com/v1/projects/peakflow-3a2ed 200
[debug] [2025-10-21T00:51:20.294Z] <<< [apiv2][body] GET https://cloudresourcemanager.googleapis.com/v1/projects/peakflow-3a2ed {"projectNumber":"244374297943","projectId":"peakflow-3a2ed","lifecycleState":"ACTIVE","name":"peakflow","labels":{"firebase":"enabled","firebase-core":"disabled"},"createTime":"2025-07-12T19:53:51.143595Z"}
[info] Now using project peakflow-3a2ed
[debug] [2025-10-21T00:51:21.652Z] ----------------------------------------------------------------------
[debug] [2025-10-21T00:51:21.654Z] Command:       /home/dachu/.nvm/versions/node/v22.20.0/bin/node /home/dachu/.nvm/versions/node/v22.20.0/bin/firebase deploy --only firestore:indexes
[debug] [2025-10-21T00:51:21.654Z] CLI Version:   14.20.0
[debug] [2025-10-21T00:51:21.654Z] Platform:      linux
[debug] [2025-10-21T00:51:21.654Z] Node Version:  v22.20.0
[debug] [2025-10-21T00:51:21.654Z] Time:          Tue Oct 21 2025 02:51:21 GMT+0200 (Central Africa Time)
[debug] [2025-10-21T00:51:21.654Z] ----------------------------------------------------------------------
[debug] 
[debug] [2025-10-21T00:51:21.787Z] > command requires scopes: ["email","openid","https://www.googleapis.com/auth/cloudplatformprojects.readonly","https://www.googleapis.com/auth/firebase","https://www.googleapis.com/auth/cloud-platform"]
[debug] [2025-10-21T00:51:21.788Z] > authorizing via signed-in user (brpotch@gmail.com)
[debug] [2025-10-21T00:51:21.788Z] [iam] checking project peakflow-3a2ed for permissions ["datastore.indexes.create","datastore.indexes.delete","datastore.indexes.list","datastore.indexes.update","firebase.projects.get"]
[debug] [2025-10-21T00:51:21.789Z] Checked if tokens are valid: true, expires at: 1761011462499
[debug] [2025-10-21T00:51:21.789Z] Checked if tokens are valid: true, expires at: 1761011462499
[debug] [2025-10-21T00:51:21.789Z] >>> [apiv2][query] POST https://cloudresourcemanager.googleapis.com/v1/projects/peakflow-3a2ed:testIamPermissions [none]
[debug] [2025-10-21T00:51:21.789Z] >>> [apiv2][(partial)header] POST https://cloudresourcemanager.googleapis.com/v1/projects/peakflow-3a2ed:testIamPermissions x-goog-quota-user=projects/peakflow-3a2ed
[debug] [2025-10-21T00:51:21.789Z] >>> [apiv2][body] POST https://cloudresourcemanager.googleapis.com/v1/projects/peakflow-3a2ed:testIamPermissions {"permissions":["datastore.indexes.create","datastore.indexes.delete","datastore.indexes.list","datastore.indexes.update","firebase.projects.get"]}
[debug] [2025-10-21T00:51:23.583Z] <<< [apiv2][status] POST https://cloudresourcemanager.googleapis.com/v1/projects/peakflow-3a2ed:testIamPermissions 200
[debug] [2025-10-21T00:51:23.583Z] <<< [apiv2][body] POST https://cloudresourcemanager.googleapis.com/v1/projects/peakflow-3a2ed:testIamPermissions {"permissions":["datastore.indexes.create","datastore.indexes.delete","datastore.indexes.list","datastore.indexes.update","firebase.projects.get"]}
[info] 
[info] === Deploying to 'peakflow-3a2ed'...
[info] 
[info] i  deploying firestore 
[info] i  firestore: ensuring required API firestore.googleapis.com is enabled... 
[debug] [2025-10-21T00:51:23.587Z] Checked if tokens are valid: true, expires at: 1761011462499
[debug] [2025-10-21T00:51:23.588Z] Checked if tokens are valid: true, expires at: 1761011462499
[debug] [2025-10-21T00:51:23.588Z] >>> [apiv2][query] GET https://serviceusage.googleapis.com/v1/projects/peakflow-3a2ed/services/firestore.googleapis.com [none]
[debug] [2025-10-21T00:51:23.588Z] >>> [apiv2][(partial)header] GET https://serviceusage.googleapis.com/v1/projects/peakflow-3a2ed/services/firestore.googleapis.com x-goog-quota-user=projects/peakflow-3a2ed
[debug] [2025-10-21T00:51:25.604Z] <<< [apiv2][status] GET https://serviceusage.googleapis.com/v1/projects/peakflow-3a2ed/services/firestore.googleapis.com 200
[debug] [2025-10-21T00:51:25.604Z] <<< [apiv2][body] GET https://serviceusage.googleapis.com/v1/projects/peakflow-3a2ed/services/firestore.googleapis.com [omitted]
[info] ✔  firestore: required API firestore.googleapis.com is enabled 
[info] i  firestore: ensuring required API firestore.googleapis.com is enabled... 
[debug] [2025-10-21T00:51:25.615Z] Checked if tokens are valid: true, expires at: 1761011462499
[debug] [2025-10-21T00:51:25.616Z] Checked if tokens are valid: true, expires at: 1761011462499
[debug] [2025-10-21T00:51:25.616Z] >>> [apiv2][query] GET https://firestore.googleapis.com/v1/projects/peakflow-3a2ed/databases/(default) [none]
[debug] [2025-10-21T00:51:27.654Z] <<< [apiv2][status] GET https://firestore.googleapis.com/v1/projects/peakflow-3a2ed/databases/(default) 200
[debug] [2025-10-21T00:51:27.655Z] <<< [apiv2][body] GET https://firestore.googleapis.com/v1/projects/peakflow-3a2ed/databases/(default) {"name":"projects/peakflow-3a2ed/databases/(default)","uid":"50985e32-a12a-4059-9b1d-eef79d866ef5","createTime":"2025-07-12T19:56:29.695403Z","updateTime":"2025-07-12T19:56:29.695403Z","locationId":"nam5","type":"FIRESTORE_NATIVE","concurrencyMode":"PESSIMISTIC","versionRetentionPeriod":"3600s","earliestVersionTime":"2025-10-20T23:51:27.604311Z","appEngineIntegrationMode":"DISABLED","keyPrefix":"s","pointInTimeRecoveryEnablement":"POINT_IN_TIME_RECOVERY_DISABLED","deleteProtectionState":"DELETE_PROTECTION_DISABLED","databaseEdition":"STANDARD","freeTier":true,"realtimeUpdatesMode":"REALTIME_UPDATES_MODE_ENABLED","etag":"ILKt2cyJtJADMIizs/+suY4D"}
[info] i  firestore: reading indexes from firestore.indexes.json... 
[info] i  cloud.firestore: checking firestore.rules for compilation errors... 
[debug] [2025-10-21T00:51:27.663Z] Checked if tokens are valid: true, expires at: 1761011462499
[debug] [2025-10-21T00:51:27.663Z] Checked if tokens are valid: true, expires at: 1761011462499
[debug] [2025-10-21T00:51:27.664Z] >>> [apiv2][query] POST https://firebaserules.googleapis.com/v1/projects/peakflow-3a2ed:test [none]
[debug] [2025-10-21T00:51:27.664Z] >>> [apiv2][body] POST https://firebaserules.googleapis.com/v1/projects/peakflow-3a2ed:test [omitted]
[debug] [2025-10-21T00:51:29.369Z] <<< [apiv2][status] POST https://firebaserules.googleapis.com/v1/projects/peakflow-3a2ed:test 200
[debug] [2025-10-21T00:51:29.369Z] <<< [apiv2][body] POST https://firebaserules.googleapis.com/v1/projects/peakflow-3a2ed:test {}
[info] ✔  cloud.firestore: rules file firestore.rules compiled successfully 
[info] i  firestore: deploying indexes... 
[debug] [2025-10-21T00:51:29.373Z] Checked if tokens are valid: true, expires at: 1761011462499
[debug] [2025-10-21T00:51:29.373Z] Checked if tokens are valid: true, expires at: 1761011462499
[debug] [2025-10-21T00:51:29.374Z] >>> [apiv2][query] GET https://firestore.googleapis.com/v1/projects/peakflow-3a2ed/databases/(default)/collectionGroups/-/indexes [none]
[debug] [2025-10-21T00:51:29.739Z] <<< [apiv2][status] GET https://firestore.googleapis.com/v1/projects/peakflow-3a2ed/databases/(default)/collectionGroups/-/indexes 200
[debug] [2025-10-21T00:51:29.739Z] <<< [apiv2][body] GET https://firestore.googleapis.com/v1/projects/peakflow-3a2ed/databases/(default)/collectionGroups/-/indexes {"indexes":[{"name":"projects/peakflow-3a2ed/databases/(default)/collectionGroups/bankAccounts/indexes/CICAgLjy8IAJ","queryScope":"COLLECTION","fields":[{"fieldPath":"status","order":"ASCENDING"},{"fieldPath":"createdAt","order":"DESCENDING"},{"fieldPath":"__name__","order":"DESCENDING"}],"state":"READY","density":"SPARSE_ALL"},{"name":"projects/peakflow-3a2ed/databases/(default)/collectionGroups/invoices/indexes/CICAgPjChIAK","queryScope":"COLLECTION","fields":[{"fieldPath":"status","order":"ASCENDING"},{"fieldPath":"invoiceDate","order":"ASCENDING"},{"fieldPath":"__name__","order":"ASCENDING"}],"state":"READY","density":"SPARSE_ALL"},{"name":"projects/peakflow-3a2ed/databases/(default)/collectionGroups/companies/indexes/CICAgNiav4AK","queryScope":"COLLECTION","fields":[{"fieldPath":"isActive","order":"ASCENDING"},{"fieldPath":"name","order":"ASCENDING"},{"fieldPath":"__name__","order":"ASCENDING"}],"state":"READY","density":"SPARSE_ALL"},{"name":"projects/peakflow-3a2ed/databases/(default)/collectionGroups/tasks/indexes/CICAgJim14AK","queryScope":"COLLECTION","fields":[{"fieldPath":"companyId","order":"ASCENDING"},{"fieldPath":"type","order":"ASCENDING"},{"fieldPath":"createdAt","order":"DESCENDING"},{"fieldPath":"__name__","order":"DESCENDING"}],"state":"READY","density":"SPARSE_ALL"},{"name":"projects/peakflow-3a2ed/databases/(default)/collectionGroups/chartOfAccounts/indexes/CICAgLjy8IAK","queryScope":"COLLECTION","fields":[{"fieldPath":"isActive","order":"ASCENDING"},{"fieldPath":"type","order":"ASCENDING"},{"fieldPath":"code","order":"ASCENDING"},{"fieldPath":"__name__","order":"ASCENDING"}],"state":"READY","density":"SPARSE_ALL"},{"name":"projects/peakflow-3a2ed/databases/(default)/collectionGroups/tasks/indexes/CICAgOjXh4EK","queryScope":"COLLECTION","fields":[{"fieldPath":"companyId","order":"ASCENDING"},{"fieldPath":"status","order":"ASCENDING"},{"fieldPath":"dueDate","order":"ASCENDING"},{"fieldPath":"__name__","order":"ASCENDING"}],"state":"READY","density":"SPARSE_ALL"},{"name":"projects/peakflow-3a2ed/databases/(default)/collectionGroups/ledgerEntries/indexes/CICAgNiroIEK","queryScope":"COLLECTION","fields":[{"fieldPath":"bankAccountId","order":"ASCENDING"},{"fieldPath":"transactionDate","order":"DESCENDING"},{"fieldPath":"__name__","order":"DESCENDING"}],"state":"READY","density":"SPARSE_ALL"},{"name":"projects/peakflow-3a2ed/databases/(default)/collectionGroups/fiscal_periods/indexes/CICAgLiT6IEK","queryScope":"COLLECTION","fields":[{"fieldPath":"tenantId","order":"ASCENDING"},{"fieldPath":"endDate","order":"ASCENDING"},{"fieldPath":"startDate","order":"ASCENDING"},{"fieldPath":"__name__","order":"ASCENDING"}],"state":"READY","density":"SPARSE_ALL"},{"name":"projects/peakflow-3a2ed/databases/(default)/collectionGroups/accounting_accounts/indexes/CICAgNjpgYIK","queryScope":"COLLECTION","fields":[{"fieldPath":"chartId","order":"ASCENDING"},{"fieldPath":"tenantId","order":"ASCENDING"},{"fieldPath":"code","order":"ASCENDING"},{"fieldPath":"__name__","order":"ASCENDING"}],"state":"READY","density":"SPARSE_ALL"},{"name":"projects/peakflow-3a2ed/databases/(default)/collectionGroups/general_ledger/indexes/CICAgPj-pYIK","queryScope":"COLLECTION","fields":[{"fieldPath":"tenantId","order":"ASCENDING"},{"fieldPath":"transactionDate","order":"ASCENDING"},{"fieldPath":"__name__","order":"ASCENDING"}],"state":"READY","density":"SPARSE_ALL"},{"name":"projects/peakflow-3a2ed/databases/(default)/collectionGroups/fiscal_periods/indexes/CICAgLjRyYIK","queryScope":"COLLECTION","fields":[{"fieldPath":"tenantId","order":"ASCENDING"},{"fieldPath":"startDate","order":"DESCENDING"},{"fieldPath":"__name__","order":"DESCENDING"}],"state":"READY","density":"SPARSE_ALL"},{"name":"projects/peakflow-3a2ed/databases/(default)/collectionGroups/schedules/indexes/CICAgJjF9oIK","queryScope":"COLLECTION","fields":[{"fieldPath":"companyId","order":"ASCENDING"},{"fieldPath":"industryType","order":"ASCENDING"},{"fieldPath":"createdAt","order":"DESCENDING"},{"fieldPath":"__name__","order":"DESCENDING"}],"state":"READY","density":"SPARSE_ALL"},{"name":"projects/peakflow-3a2ed/databases/(default)/collectionGroups/bankStatements/indexes/CICAgLiIkYMK","queryScope":"COLLECTION","fields":[{"fieldPath":"accountInfo.accountNumber","order":"ASCENDING"},{"fieldPath":"summary.statementPeriod.from","order":"DESCENDING"},{"fieldPath":"__name__","order":"DESCENDING"}],"state":"READY","density":"SPARSE_ALL"},{"name":"projects/peakflow-3a2ed/databases/(default)/collectionGroups/tasks/indexes/CICAgJiUpoMK","queryScope":"COLLECTION","fields":[{"fieldPath":"companyId","order":"ASCENDING"},{"fieldPath":"assigneeId","order":"ASCENDING"},{"fieldPath":"status","order":"ASCENDING"},{"fieldPath":"__name__","order":"ASCENDING"}],"state":"READY","density":"SPARSE_ALL"},{"name":"projects/peakflow-3a2ed/databases/(default)/collectionGroups/statements/indexes/CICAgPig2YMK","queryScope":"COLLECTION","fields":[{"fieldPath":"entityType","order":"ASCENDING"},{"fieldPath":"createdAt","order":"DESCENDING"},{"fieldPath":"__name__","order":"DESCENDING"}],"state":"READY","density":"SPARSE_ALL"},{"name":"projects/peakflow-3a2ed/databases/(default)/collectionGroups/users/indexes/CICAgNi47oMK","queryScope":"COLLECTION","fields":[{"fieldPath":"companyId","order":"ASCENDING"},{"fieldPath":"createdAt","order":"DESCENDING"},{"fieldPath":"__name__","order":"DESCENDING"}],"state":"READY","density":"SPARSE_ALL"},{"name":"projects/peakflow-3a2ed/databases/(default)/collectionGroups/statements/indexes/CICAgOi3voUK","queryScope":"COLLECTION","fields":[{"fieldPath":"customerId","order":"ASCENDING"},{"fieldPath":"entityType","order":"ASCENDING"},{"fieldPath":"periodEnd","order":"DESCENDING"},{"fieldPath":"__name__","order":"DESCENDING"}],"state":"READY","density":"SPARSE_ALL"},{"name":"projects/peakflow-3a2ed/databases/(default)/collectionGroups/creditNotes/indexes/CICAgJjUgIcK","queryScope":"COLLECTION","fields":[{"fieldPath":"type","order":"ASCENDING"},{"fieldPath":"creditNoteDate","order":"DESCENDING"},{"fieldPath":"__name__","order":"DESCENDING"}],"state":"READY","density":"SPARSE_ALL"},{"name":"projects/peakflow-3a2ed/databases/(default)/collectionGroups/users/indexes/CICAgJjmnIgK","queryScope":"COLLECTION","fields":[{"fieldPath":"companyId","order":"ASCENDING"},{"fieldPath":"fullName","order":"ASCENDING"},{"fieldPath":"__name__","order":"ASCENDING"}],"state":"READY","density":"SPARSE_ALL"},{"name":"projects/peakflow-3a2ed/databases/(default)/collectionGroups/general_ledger/indexes/CICAgNja0ogK","queryScope":"COLLECTION","fields":[{"fieldPath":"accountCode","order":"ASCENDING"},{"fieldPath":"tenantId","order":"ASCENDING"},{"fieldPath":"transactionDate","order":"ASCENDING"},{"fieldPath":"__name__","order":"ASCENDING"}],"state":"READY","density":"SPARSE_ALL"},{"name":"projects/peakflow-3a2ed/databases/(default)/collectionGroups/users/indexes/CICAgOi39IkK","queryScope":"COLLECTION","fields":[{"fieldPath":"isActive","order":"ASCENDING"},{"fieldPath":"companyId","order":"ASCENDING"},{"fieldPath":"__name__","order":"ASCENDING"}],"state":"READY","density":"SPARSE_ALL"},{"name":"projects/peakflow-3a2ed/databases/(default)/collectionGroups/payments/indexes/CICAgNi4o4sK","queryScope":"COLLECTION","fields":[{"fieldPath":"debtorId","order":"ASCENDING"},{"fieldPath":"paymentDate","order":"ASCENDING"},{"fieldPath":"__name__","order":"ASCENDING"}],"state":"READY","density":"SPARSE_ALL"},{"name":"projects/peakflow-3a2ed/databases/(default)/collectionGroups/users/indexes/CICAgJiUzYsK","queryScope":"COLLECTION","fields":[{"fieldPath":"companyId","order":"ASCENDING"},{"fieldPath":"roles","arrayConfig":"CONTAINS"},{"fieldPath":"__name__","order":"ASCENDING"}],"state":"READY","density":"SPARSE_ALL"},{"name":"projects/peakflow-3a2ed/databases/(default)/collectionGroups/companies/indexes/CICAgOi3kJAK","queryScope":"COLLECTION","fields":[{"fieldPath":"type","order":"ASCENDING"},{"fieldPath":"createdAt","order":"DESCENDING"},{"fieldPath":"__name__","order":"DESCENDING"}],"state":"READY","density":"SPARSE_ALL"},{"name":"projects/peakflow-3a2ed/databases/(default)/collectionGroups/journal_entries/indexes/CICAgNirtJAK","queryScope":"COLLECTION","fields":[{"fieldPath":"tenantId","order":"ASCENDING"},{"fieldPath":"transactionDate","order":"ASCENDING"},{"fieldPath":"__name__","order":"ASCENDING"}],"state":"READY","density":"SPARSE_ALL"},{"name":"projects/peakflow-3a2ed/databases/(default)/collectionGroups/accounting_charts/indexes/CICAgJiH2JAK","queryScope":"COLLECTION","fields":[{"fieldPath":"tenantId","order":"ASCENDING"},{"fieldPath":"createdAt","order":"DESCENDING"},{"fieldPath":"__name__","order":"DESCENDING"}],"state":"READY","density":"SPARSE_ALL"},{"name":"projects/peakflow-3a2ed/databases/(default)/collectionGroups/glMappingRules/indexes/CICAgNjaxJEK","queryScope":"COLLECTION","fields":[{"fieldPath":"isActive","order":"ASCENDING"},{"fieldPath":"priority","order":"ASCENDING"},{"fieldPath":"__name__","order":"ASCENDING"}],"state":"READY","density":"SPARSE_ALL"},{"name":"projects/peakflow-3a2ed/databases/(default)/collectionGroups/schedules/indexes/CICAgJiUsZIK","queryScope":"COLLECTION","fields":[{"fieldPath":"companyId","order":"ASCENDING"},{"fieldPath":"status","order":"ASCENDING"},{"fieldPath":"nextScheduledDate","order":"ASCENDING"},{"fieldPath":"__name__","order":"ASCENDING"}],"state":"READY","density":"SPARSE_ALL"},{"name":"projects/peakflow-3a2ed/databases/(default)/collectionGroups/invoices/indexes/CICAgLjRnZMK","queryScope":"COLLECTION","fields":[{"fieldPath":"customerId","order":"ASCENDING"},{"fieldPath":"invoiceDate","order":"ASCENDING"},{"fieldPath":"__name__","order":"ASCENDING"}],"state":"READY","density":"SPARSE_ALL"},{"name":"projects/peakflow-3a2ed/databases/(default)/collectionGroups/journal_entries/indexes/CICAgNjp5ZMK","queryScope":"COLLECTION","fields":[{"fieldPath":"source","order":"ASCENDING"},{"fieldPath":"tenantId","order":"ASCENDING"},{"fieldPath":"transactionDate","order":"ASCENDING"},{"fieldPath":"__name__","order":"ASCENDING"}],"state":"READY","density":"SPARSE_ALL"},{"name":"projects/peakflow-3a2ed/databases/(default)/collectionGroups/invoices/indexes/CICAgJjUlJYK","queryScope":"COLLECTION","fields":[{"fieldPath":"debtorId","order":"ASCENDING"},{"fieldPath":"invoiceDate","order":"ASCENDING"},{"fieldPath":"__name__","order":"ASCENDING"}],"state":"READY","density":"SPARSE_ALL"},{"name":"projects/peakflow-3a2ed/databases/(default)/collectionGroups/bank_statements/indexes/CICAgOi36pgK","queryScope":"COLLECTION","fields":[{"fieldPath":"companyId","order":"ASCENDING"},{"fieldPath":"uploadedAt","order":"DESCENDING"},{"fieldPath":"__name__","order":"DESCENDING"}],"state":"READY","density":"SPARSE_ALL"},{"name":"projects/peakflow-3a2ed/databases/(default)/collectionGroups/journal_entries/indexes/CICAgJjm-pkK","queryScope":"COLLECTION","fields":[{"fieldPath":"tenantId","order":"ASCENDING"},{"fieldPath":"transactionDate","order":"DESCENDING"},{"fieldPath":"__name__","order":"DESCENDING"}],"state":"READY","density":"SPARSE_ALL"},{"name":"projects/peakflow-3a2ed/databases/(default)/collectionGroups/creditNotes/indexes/CICAgNi4t5oK","queryScope":"COLLECTION","fields":[{"fieldPath":"customerId","order":"ASCENDING"},{"fieldPath":"type","order":"ASCENDING"},{"fieldPath":"creditNoteDate","order":"ASCENDING"},{"fieldPath":"__name__","order":"ASCENDING"}],"state":"READY","density":"SPARSE_ALL"},{"name":"projects/peakflow-3a2ed/databases/(default)/collectionGroups/ledgerEntries/indexes/CICAgJiU25oK","queryScope":"COLLECTION","fields":[{"fieldPath":"accountId","order":"ASCENDING"},{"fieldPath":"transactionDate","order":"DESCENDING"},{"fieldPath":"__name__","order":"DESCENDING"}],"state":"READY","density":"SPARSE_ALL"}]}
[debug] [2025-10-21T00:51:29.740Z] Checked if tokens are valid: true, expires at: 1761011462499
[debug] [2025-10-21T00:51:29.740Z] Checked if tokens are valid: true, expires at: 1761011462499
[debug] [2025-10-21T00:51:29.740Z] >>> [apiv2][query] GET https://firestore.googleapis.com/v1/projects/peakflow-3a2ed/databases/(default)/collectionGroups/-/fields?filter=indexConfig.usesAncestorConfig=false OR ttlConfig:* [none]
[debug] [2025-10-21T00:51:30.084Z] <<< [apiv2][status] GET https://firestore.googleapis.com/v1/projects/peakflow-3a2ed/databases/(default)/collectionGroups/-/fields?filter=indexConfig.usesAncestorConfig=false OR ttlConfig:* 200
[debug] [2025-10-21T00:51:30.084Z] <<< [apiv2][body] GET https://firestore.googleapis.com/v1/projects/peakflow-3a2ed/databases/(default)/collectionGroups/-/fields?filter=indexConfig.usesAncestorConfig=false OR ttlConfig:* {"fields":[{"name":"projects/peakflow-3a2ed/databases/(default)/collectionGroups/__default__/fields/*","indexConfig":{"indexes":[{"queryScope":"COLLECTION","fields":[{"fieldPath":"*","order":"ASCENDING"}],"state":"READY"},{"queryScope":"COLLECTION","fields":[{"fieldPath":"*","order":"DESCENDING"}],"state":"READY"},{"queryScope":"COLLECTION","fields":[{"fieldPath":"*","arrayConfig":"CONTAINS"}],"state":"READY"}]}},{"name":"projects/peakflow-3a2ed/databases/(default)/collectionGroups/schedules/fields/tags","indexConfig":{"indexes":[{"queryScope":"COLLECTION","fields":[{"fieldPath":"tags","order":"ASCENDING"}],"state":"READY"},{"queryScope":"COLLECTION","fields":[{"fieldPath":"tags","order":"DESCENDING"}],"state":"READY"},{"queryScope":"COLLECTION","fields":[{"fieldPath":"tags","arrayConfig":"CONTAINS"}],"state":"READY"},{"queryScope":"COLLECTION_GROUP","fields":[{"fieldPath":"tags","order":"ASCENDING"}],"state":"READY"},{"queryScope":"COLLECTION_GROUP","fields":[{"fieldPath":"tags","order":"DESCENDING"}],"state":"READY"},{"queryScope":"COLLECTION_GROUP","fields":[{"fieldPath":"tags","arrayConfig":"CONTAINS"}],"state":"READY"}],"ancestorField":"projects/peakflow-3a2ed/databases/(default)/collectionGroups/__default__/fields/*"}},{"name":"projects/peakflow-3a2ed/databases/(default)/collectionGroups/tasks/fields/tags","indexConfig":{"indexes":[{"queryScope":"COLLECTION","fields":[{"fieldPath":"tags","arrayConfig":"CONTAINS"}],"state":"READY"}],"ancestorField":"projects/peakflow-3a2ed/databases/(default)/collectionGroups/__default__/fields/*"}}]}
[debug] [2025-10-21T00:51:30.085Z] Checked if tokens are valid: true, expires at: 1761011462499
[debug] [2025-10-21T00:51:30.085Z] Checked if tokens are valid: true, expires at: 1761011462499
[debug] [2025-10-21T00:51:30.085Z] >>> [apiv2][query] GET https://firestore.googleapis.com/v1/projects/peakflow-3a2ed/databases/(default) [none]
[debug] [2025-10-21T00:51:30.472Z] <<< [apiv2][status] GET https://firestore.googleapis.com/v1/projects/peakflow-3a2ed/databases/(default) 200
[debug] [2025-10-21T00:51:30.472Z] <<< [apiv2][body] GET https://firestore.googleapis.com/v1/projects/peakflow-3a2ed/databases/(default) {"name":"projects/peakflow-3a2ed/databases/(default)","uid":"50985e32-a12a-4059-9b1d-eef79d866ef5","createTime":"2025-07-12T19:56:29.695403Z","updateTime":"2025-07-12T19:56:29.695403Z","locationId":"nam5","type":"FIRESTORE_NATIVE","concurrencyMode":"PESSIMISTIC","versionRetentionPeriod":"3600s","earliestVersionTime":"2025-10-20T23:51:30.437510Z","appEngineIntegrationMode":"DISABLED","keyPrefix":"s","pointInTimeRecoveryEnablement":"POINT_IN_TIME_RECOVERY_DISABLED","deleteProtectionState":"DELETE_PROTECTION_DISABLED","databaseEdition":"STANDARD","freeTier":true,"realtimeUpdatesMode":"REALTIME_UPDATES_MODE_ENABLED","etag":"IOSmhs6JtJADMIizs/+suY4D"}
[info] i  firestore: there are 27 indexes defined in your project that are not present in your firestore indexes file. To delete them, run this command with the --force flag. 
[debug] [2025-10-21T00:51:30.476Z] Skipping existing index: {"collectionGroup":"users","queryScope":"COLLECTION","fields":[{"fieldPath":"companyId","order":"ASCENDING"},{"fieldPath":"createdAt","order":"DESCENDING"},{"fieldPath":"__name__","order":"DESCENDING"}]}
[debug] [2025-10-21T00:51:30.476Z] Skipping existing index: {"collectionGroup":"users","queryScope":"COLLECTION","fields":[{"fieldPath":"companyId","order":"ASCENDING"},{"fieldPath":"fullName","order":"ASCENDING"},{"fieldPath":"__name__","order":"ASCENDING"}]}
[debug] [2025-10-21T00:51:30.476Z] Creating new index: {"collectionGroup":"users","queryScope":"COLLECTION","fields":[{"fieldPath":"companyId","order":"ASCENDING"},{"fieldPath":"roles","arrayConfig":"CONTAINS"},{"fieldPath":"__name__"}]}
[debug] [2025-10-21T00:51:30.477Z] Checked if tokens are valid: true, expires at: 1761011462499
[debug] [2025-10-21T00:51:30.477Z] Checked if tokens are valid: true, expires at: 1761011462499
[debug] [2025-10-21T00:51:30.477Z] >>> [apiv2][query] POST https://firestore.googleapis.com/v1/projects/peakflow-3a2ed/databases/(default)/collectionGroups/users/indexes [none]
[debug] [2025-10-21T00:51:30.477Z] >>> [apiv2][body] POST https://firestore.googleapis.com/v1/projects/peakflow-3a2ed/databases/(default)/collectionGroups/users/indexes {"fields":[{"fieldPath":"companyId","order":"ASCENDING"},{"fieldPath":"roles","arrayConfig":"CONTAINS"},{"fieldPath":"__name__"}],"queryScope":"COLLECTION"}
[debug] [2025-10-21T00:51:30.804Z] <<< [apiv2][status] POST https://firestore.googleapis.com/v1/projects/peakflow-3a2ed/databases/(default)/collectionGroups/users/indexes 400
[debug] [2025-10-21T00:51:30.804Z] <<< [apiv2][body] POST https://firestore.googleapis.com/v1/projects/peakflow-3a2ed/databases/(default)/collectionGroups/users/indexes {"error":{"code":400,"message":"No valid order or array config provided: field_path: \t \"__name__\"\n","status":"INVALID_ARGUMENT"}}
[error] 
[error] Error: Request to https://firestore.googleapis.com/v1/projects/peakflow-3a2ed/databases/(default)/collectionGroups/users/indexes had HTTP Error: 400, No valid order or array config provided: field_path: 	 "__name__"

[debug] [2025-10-21T00:51:31.365Z] Error Context: {
  "body": {
    "error": {
      "code": 400,
      "message": "No valid order or array config provided: field_path: \t \"__name__\"\n",
      "status": "INVALID_ARGUMENT"
    }
  },
  "response": {
    "statusCode": 400
  }
}
[debug] [2025-10-21T00:52:33.651Z] ----------------------------------------------------------------------
[debug] [2025-10-21T00:52:33.653Z] Command:       /home/dachu/.nvm/versions/node/v22.20.0/bin/node /home/dachu/.nvm/versions/node/v22.20.0/bin/firebase firestore:indexes
[debug] [2025-10-21T00:52:33.653Z] CLI Version:   14.20.0
[debug] [2025-10-21T00:52:33.653Z] Platform:      linux
[debug] [2025-10-21T00:52:33.653Z] Node Version:  v22.20.0
[debug] [2025-10-21T00:52:33.653Z] Time:          Tue Oct 21 2025 02:52:33 GMT+0200 (Central Africa Time)
[debug] [2025-10-21T00:52:33.654Z] ----------------------------------------------------------------------
[debug] 
[debug] [2025-10-21T00:52:33.783Z] > command requires scopes: ["email","openid","https://www.googleapis.com/auth/cloudplatformprojects.readonly","https://www.googleapis.com/auth/firebase","https://www.googleapis.com/auth/cloud-platform"]
[debug] [2025-10-21T00:52:33.784Z] > authorizing via signed-in user (brpotch@gmail.com)
[debug] [2025-10-21T00:52:33.784Z] [iam] checking project peakflow-3a2ed for permissions ["datastore.indexes.list","firebase.projects.get"]
[debug] [2025-10-21T00:52:33.785Z] Checked if tokens are valid: true, expires at: 1761011462499
[debug] [2025-10-21T00:52:33.785Z] Checked if tokens are valid: true, expires at: 1761011462499
[debug] [2025-10-21T00:52:33.786Z] >>> [apiv2][query] POST https://cloudresourcemanager.googleapis.com/v1/projects/peakflow-3a2ed:testIamPermissions [none]
[debug] [2025-10-21T00:52:33.786Z] >>> [apiv2][(partial)header] POST https://cloudresourcemanager.googleapis.com/v1/projects/peakflow-3a2ed:testIamPermissions x-goog-quota-user=projects/peakflow-3a2ed
[debug] [2025-10-21T00:52:33.786Z] >>> [apiv2][body] POST https://cloudresourcemanager.googleapis.com/v1/projects/peakflow-3a2ed:testIamPermissions {"permissions":["datastore.indexes.list","firebase.projects.get"]}
[debug] [2025-10-21T00:52:35.545Z] <<< [apiv2][status] POST https://cloudresourcemanager.googleapis.com/v1/projects/peakflow-3a2ed:testIamPermissions 200
[debug] [2025-10-21T00:52:35.545Z] <<< [apiv2][body] POST https://cloudresourcemanager.googleapis.com/v1/projects/peakflow-3a2ed:testIamPermissions {"permissions":["datastore.indexes.list","firebase.projects.get"]}
[debug] [2025-10-21T00:52:35.546Z] Checked if tokens are valid: true, expires at: 1761011462499
[debug] [2025-10-21T00:52:35.547Z] Checked if tokens are valid: true, expires at: 1761011462499
[debug] [2025-10-21T00:52:35.547Z] >>> [apiv2][query] GET https://firestore.googleapis.com/v1/projects/peakflow-3a2ed/databases/(default)/collectionGroups/-/indexes [none]
[debug] [2025-10-21T00:52:37.429Z] <<< [apiv2][status] GET https://firestore.googleapis.com/v1/projects/peakflow-3a2ed/databases/(default)/collectionGroups/-/indexes 200
[debug] [2025-10-21T00:52:37.429Z] <<< [apiv2][body] GET https://firestore.googleapis.com/v1/projects/peakflow-3a2ed/databases/(default)/collectionGroups/-/indexes {"indexes":[{"name":"projects/peakflow-3a2ed/databases/(default)/collectionGroups/bankAccounts/indexes/CICAgLjy8IAJ","queryScope":"COLLECTION","fields":[{"fieldPath":"status","order":"ASCENDING"},{"fieldPath":"createdAt","order":"DESCENDING"},{"fieldPath":"__name__","order":"DESCENDING"}],"state":"READY","density":"SPARSE_ALL"},{"name":"projects/peakflow-3a2ed/databases/(default)/collectionGroups/invoices/indexes/CICAgPjChIAK","queryScope":"COLLECTION","fields":[{"fieldPath":"status","order":"ASCENDING"},{"fieldPath":"invoiceDate","order":"ASCENDING"},{"fieldPath":"__name__","order":"ASCENDING"}],"state":"READY","density":"SPARSE_ALL"},{"name":"projects/peakflow-3a2ed/databases/(default)/collectionGroups/companies/indexes/CICAgNiav4AK","queryScope":"COLLECTION","fields":[{"fieldPath":"isActive","order":"ASCENDING"},{"fieldPath":"name","order":"ASCENDING"},{"fieldPath":"__name__","order":"ASCENDING"}],"state":"READY","density":"SPARSE_ALL"},{"name":"projects/peakflow-3a2ed/databases/(default)/collectionGroups/tasks/indexes/CICAgJim14AK","queryScope":"COLLECTION","fields":[{"fieldPath":"companyId","order":"ASCENDING"},{"fieldPath":"type","order":"ASCENDING"},{"fieldPath":"createdAt","order":"DESCENDING"},{"fieldPath":"__name__","order":"DESCENDING"}],"state":"READY","density":"SPARSE_ALL"},{"name":"projects/peakflow-3a2ed/databases/(default)/collectionGroups/chartOfAccounts/indexes/CICAgLjy8IAK","queryScope":"COLLECTION","fields":[{"fieldPath":"isActive","order":"ASCENDING"},{"fieldPath":"type","order":"ASCENDING"},{"fieldPath":"code","order":"ASCENDING"},{"fieldPath":"__name__","order":"ASCENDING"}],"state":"READY","density":"SPARSE_ALL"},{"name":"projects/peakflow-3a2ed/databases/(default)/collectionGroups/tasks/indexes/CICAgOjXh4EK","queryScope":"COLLECTION","fields":[{"fieldPath":"companyId","order":"ASCENDING"},{"fieldPath":"status","order":"ASCENDING"},{"fieldPath":"dueDate","order":"ASCENDING"},{"fieldPath":"__name__","order":"ASCENDING"}],"state":"READY","density":"SPARSE_ALL"},{"name":"projects/peakflow-3a2ed/databases/(default)/collectionGroups/ledgerEntries/indexes/CICAgNiroIEK","queryScope":"COLLECTION","fields":[{"fieldPath":"bankAccountId","order":"ASCENDING"},{"fieldPath":"transactionDate","order":"DESCENDING"},{"fieldPath":"__name__","order":"DESCENDING"}],"state":"READY","density":"SPARSE_ALL"},{"name":"projects/peakflow-3a2ed/databases/(default)/collectionGroups/fiscal_periods/indexes/CICAgLiT6IEK","queryScope":"COLLECTION","fields":[{"fieldPath":"tenantId","order":"ASCENDING"},{"fieldPath":"endDate","order":"ASCENDING"},{"fieldPath":"startDate","order":"ASCENDING"},{"fieldPath":"__name__","order":"ASCENDING"}],"state":"READY","density":"SPARSE_ALL"},{"name":"projects/peakflow-3a2ed/databases/(default)/collectionGroups/accounting_accounts/indexes/CICAgNjpgYIK","queryScope":"COLLECTION","fields":[{"fieldPath":"chartId","order":"ASCENDING"},{"fieldPath":"tenantId","order":"ASCENDING"},{"fieldPath":"code","order":"ASCENDING"},{"fieldPath":"__name__","order":"ASCENDING"}],"state":"READY","density":"SPARSE_ALL"},{"name":"projects/peakflow-3a2ed/databases/(default)/collectionGroups/general_ledger/indexes/CICAgPj-pYIK","queryScope":"COLLECTION","fields":[{"fieldPath":"tenantId","order":"ASCENDING"},{"fieldPath":"transactionDate","order":"ASCENDING"},{"fieldPath":"__name__","order":"ASCENDING"}],"state":"READY","density":"SPARSE_ALL"},{"name":"projects/peakflow-3a2ed/databases/(default)/collectionGroups/fiscal_periods/indexes/CICAgLjRyYIK","queryScope":"COLLECTION","fields":[{"fieldPath":"tenantId","order":"ASCENDING"},{"fieldPath":"startDate","order":"DESCENDING"},{"fieldPath":"__name__","order":"DESCENDING"}],"state":"READY","density":"SPARSE_ALL"},{"name":"projects/peakflow-3a2ed/databases/(default)/collectionGroups/schedules/indexes/CICAgJjF9oIK","queryScope":"COLLECTION","fields":[{"fieldPath":"companyId","order":"ASCENDING"},{"fieldPath":"industryType","order":"ASCENDING"},{"fieldPath":"createdAt","order":"DESCENDING"},{"fieldPath":"__name__","order":"DESCENDING"}],"state":"READY","density":"SPARSE_ALL"},{"name":"projects/peakflow-3a2ed/databases/(default)/collectionGroups/bankStatements/indexes/CICAgLiIkYMK","queryScope":"COLLECTION","fields":[{"fieldPath":"accountInfo.accountNumber","order":"ASCENDING"},{"fieldPath":"summary.statementPeriod.from","order":"DESCENDING"},{"fieldPath":"__name__","order":"DESCENDING"}],"state":"READY","density":"SPARSE_ALL"},{"name":"projects/peakflow-3a2ed/databases/(default)/collectionGroups/tasks/indexes/CICAgJiUpoMK","queryScope":"COLLECTION","fields":[{"fieldPath":"companyId","order":"ASCENDING"},{"fieldPath":"assigneeId","order":"ASCENDING"},{"fieldPath":"status","order":"ASCENDING"},{"fieldPath":"__name__","order":"ASCENDING"}],"state":"READY","density":"SPARSE_ALL"},{"name":"projects/peakflow-3a2ed/databases/(default)/collectionGroups/statements/indexes/CICAgPig2YMK","queryScope":"COLLECTION","fields":[{"fieldPath":"entityType","order":"ASCENDING"},{"fieldPath":"createdAt","order":"DESCENDING"},{"fieldPath":"__name__","order":"DESCENDING"}],"state":"READY","density":"SPARSE_ALL"},{"name":"projects/peakflow-3a2ed/databases/(default)/collectionGroups/users/indexes/CICAgNi47oMK","queryScope":"COLLECTION","fields":[{"fieldPath":"companyId","order":"ASCENDING"},{"fieldPath":"createdAt","order":"DESCENDING"},{"fieldPath":"__name__","order":"DESCENDING"}],"state":"READY","density":"SPARSE_ALL"},{"name":"projects/peakflow-3a2ed/databases/(default)/collectionGroups/statements/indexes/CICAgOi3voUK","queryScope":"COLLECTION","fields":[{"fieldPath":"customerId","order":"ASCENDING"},{"fieldPath":"entityType","order":"ASCENDING"},{"fieldPath":"periodEnd","order":"DESCENDING"},{"fieldPath":"__name__","order":"DESCENDING"}],"state":"READY","density":"SPARSE_ALL"},{"name":"projects/peakflow-3a2ed/databases/(default)/collectionGroups/creditNotes/indexes/CICAgJjUgIcK","queryScope":"COLLECTION","fields":[{"fieldPath":"type","order":"ASCENDING"},{"fieldPath":"creditNoteDate","order":"DESCENDING"},{"fieldPath":"__name__","order":"DESCENDING"}],"state":"READY","density":"SPARSE_ALL"},{"name":"projects/peakflow-3a2ed/databases/(default)/collectionGroups/users/indexes/CICAgJjmnIgK","queryScope":"COLLECTION","fields":[{"fieldPath":"companyId","order":"ASCENDING"},{"fieldPath":"fullName","order":"ASCENDING"},{"fieldPath":"__name__","order":"ASCENDING"}],"state":"READY","density":"SPARSE_ALL"},{"name":"projects/peakflow-3a2ed/databases/(default)/collectionGroups/general_ledger/indexes/CICAgNja0ogK","queryScope":"COLLECTION","fields":[{"fieldPath":"accountCode","order":"ASCENDING"},{"fieldPath":"tenantId","order":"ASCENDING"},{"fieldPath":"transactionDate","order":"ASCENDING"},{"fieldPath":"__name__","order":"ASCENDING"}],"state":"READY","density":"SPARSE_ALL"},{"name":"projects/peakflow-3a2ed/databases/(default)/collectionGroups/users/indexes/CICAgOi39IkK","queryScope":"COLLECTION","fields":[{"fieldPath":"isActive","order":"ASCENDING"},{"fieldPath":"companyId","order":"ASCENDING"},{"fieldPath":"__name__","order":"ASCENDING"}],"state":"READY","density":"SPARSE_ALL"},{"name":"projects/peakflow-3a2ed/databases/(default)/collectionGroups/payments/indexes/CICAgNi4o4sK","queryScope":"COLLECTION","fields":[{"fieldPath":"debtorId","order":"ASCENDING"},{"fieldPath":"paymentDate","order":"ASCENDING"},{"fieldPath":"__name__","order":"ASCENDING"}],"state":"READY","density":"SPARSE_ALL"},{"name":"projects/peakflow-3a2ed/databases/(default)/collectionGroups/users/indexes/CICAgJiUzYsK","queryScope":"COLLECTION","fields":[{"fieldPath":"companyId","order":"ASCENDING"},{"fieldPath":"roles","arrayConfig":"CONTAINS"},{"fieldPath":"__name__","order":"ASCENDING"}],"state":"READY","density":"SPARSE_ALL"},{"name":"projects/peakflow-3a2ed/databases/(default)/collectionGroups/companies/indexes/CICAgOi3kJAK","queryScope":"COLLECTION","fields":[{"fieldPath":"type","order":"ASCENDING"},{"fieldPath":"createdAt","order":"DESCENDING"},{"fieldPath":"__name__","order":"DESCENDING"}],"state":"READY","density":"SPARSE_ALL"},{"name":"projects/peakflow-3a2ed/databases/(default)/collectionGroups/journal_entries/indexes/CICAgNirtJAK","queryScope":"COLLECTION","fields":[{"fieldPath":"tenantId","order":"ASCENDING"},{"fieldPath":"transactionDate","order":"ASCENDING"},{"fieldPath":"__name__","order":"ASCENDING"}],"state":"READY","density":"SPARSE_ALL"},{"name":"projects/peakflow-3a2ed/databases/(default)/collectionGroups/accounting_charts/indexes/CICAgJiH2JAK","queryScope":"COLLECTION","fields":[{"fieldPath":"tenantId","order":"ASCENDING"},{"fieldPath":"createdAt","order":"DESCENDING"},{"fieldPath":"__name__","order":"DESCENDING"}],"state":"READY","density":"SPARSE_ALL"},{"name":"projects/peakflow-3a2ed/databases/(default)/collectionGroups/glMappingRules/indexes/CICAgNjaxJEK","queryScope":"COLLECTION","fields":[{"fieldPath":"isActive","order":"ASCENDING"},{"fieldPath":"priority","order":"ASCENDING"},{"fieldPath":"__name__","order":"ASCENDING"}],"state":"READY","density":"SPARSE_ALL"},{"name":"projects/peakflow-3a2ed/databases/(default)/collectionGroups/schedules/indexes/CICAgJiUsZIK","queryScope":"COLLECTION","fields":[{"fieldPath":"companyId","order":"ASCENDING"},{"fieldPath":"status","order":"ASCENDING"},{"fieldPath":"nextScheduledDate","order":"ASCENDING"},{"fieldPath":"__name__","order":"ASCENDING"}],"state":"READY","density":"SPARSE_ALL"},{"name":"projects/peakflow-3a2ed/databases/(default)/collectionGroups/invoices/indexes/CICAgLjRnZMK","queryScope":"COLLECTION","fields":[{"fieldPath":"customerId","order":"ASCENDING"},{"fieldPath":"invoiceDate","order":"ASCENDING"},{"fieldPath":"__name__","order":"ASCENDING"}],"state":"READY","density":"SPARSE_ALL"},{"name":"projects/peakflow-3a2ed/databases/(default)/collectionGroups/journal_entries/indexes/CICAgNjp5ZMK","queryScope":"COLLECTION","fields":[{"fieldPath":"source","order":"ASCENDING"},{"fieldPath":"tenantId","order":"ASCENDING"},{"fieldPath":"transactionDate","order":"ASCENDING"},{"fieldPath":"__name__","order":"ASCENDING"}],"state":"READY","density":"SPARSE_ALL"},{"name":"projects/peakflow-3a2ed/databases/(default)/collectionGroups/invoices/indexes/CICAgJjUlJYK","queryScope":"COLLECTION","fields":[{"fieldPath":"debtorId","order":"ASCENDING"},{"fieldPath":"invoiceDate","order":"ASCENDING"},{"fieldPath":"__name__","order":"ASCENDING"}],"state":"READY","density":"SPARSE_ALL"},{"name":"projects/peakflow-3a2ed/databases/(default)/collectionGroups/bank_statements/indexes/CICAgOi36pgK","queryScope":"COLLECTION","fields":[{"fieldPath":"companyId","order":"ASCENDING"},{"fieldPath":"uploadedAt","order":"DESCENDING"},{"fieldPath":"__name__","order":"DESCENDING"}],"state":"READY","density":"SPARSE_ALL"},{"name":"projects/peakflow-3a2ed/databases/(default)/collectionGroups/journal_entries/indexes/CICAgJjm-pkK","queryScope":"COLLECTION","fields":[{"fieldPath":"tenantId","order":"ASCENDING"},{"fieldPath":"transactionDate","order":"DESCENDING"},{"fieldPath":"__name__","order":"DESCENDING"}],"state":"READY","density":"SPARSE_ALL"},{"name":"projects/peakflow-3a2ed/databases/(default)/collectionGroups/creditNotes/indexes/CICAgNi4t5oK","queryScope":"COLLECTION","fields":[{"fieldPath":"customerId","order":"ASCENDING"},{"fieldPath":"type","order":"ASCENDING"},{"fieldPath":"creditNoteDate","order":"ASCENDING"},{"fieldPath":"__name__","order":"ASCENDING"}],"state":"READY","density":"SPARSE_ALL"},{"name":"projects/peakflow-3a2ed/databases/(default)/collectionGroups/ledgerEntries/indexes/CICAgJiU25oK","queryScope":"COLLECTION","fields":[{"fieldPath":"accountId","order":"ASCENDING"},{"fieldPath":"transactionDate","order":"DESCENDING"},{"fieldPath":"__name__","order":"DESCENDING"}],"state":"READY","density":"SPARSE_ALL"}]}
[debug] [2025-10-21T00:52:37.430Z] Checked if tokens are valid: true, expires at: 1761011462499
[debug] [2025-10-21T00:52:37.430Z] Checked if tokens are valid: true, expires at: 1761011462499
[debug] [2025-10-21T00:52:37.430Z] >>> [apiv2][query] GET https://firestore.googleapis.com/v1/projects/peakflow-3a2ed/databases/(default)/collectionGroups/-/fields?filter=indexConfig.usesAncestorConfig=false OR ttlConfig:* [none]
[debug] [2025-10-21T00:52:37.766Z] <<< [apiv2][status] GET https://firestore.googleapis.com/v1/projects/peakflow-3a2ed/databases/(default)/collectionGroups/-/fields?filter=indexConfig.usesAncestorConfig=false OR ttlConfig:* 200
[debug] [2025-10-21T00:52:37.766Z] <<< [apiv2][body] GET https://firestore.googleapis.com/v1/projects/peakflow-3a2ed/databases/(default)/collectionGroups/-/fields?filter=indexConfig.usesAncestorConfig=false OR ttlConfig:* {"fields":[{"name":"projects/peakflow-3a2ed/databases/(default)/collectionGroups/__default__/fields/*","indexConfig":{"indexes":[{"queryScope":"COLLECTION","fields":[{"fieldPath":"*","order":"ASCENDING"}],"state":"READY"},{"queryScope":"COLLECTION","fields":[{"fieldPath":"*","order":"DESCENDING"}],"state":"READY"},{"queryScope":"COLLECTION","fields":[{"fieldPath":"*","arrayConfig":"CONTAINS"}],"state":"READY"}]}},{"name":"projects/peakflow-3a2ed/databases/(default)/collectionGroups/schedules/fields/tags","indexConfig":{"indexes":[{"queryScope":"COLLECTION","fields":[{"fieldPath":"tags","order":"ASCENDING"}],"state":"READY"},{"queryScope":"COLLECTION","fields":[{"fieldPath":"tags","order":"DESCENDING"}],"state":"READY"},{"queryScope":"COLLECTION","fields":[{"fieldPath":"tags","arrayConfig":"CONTAINS"}],"state":"READY"},{"queryScope":"COLLECTION_GROUP","fields":[{"fieldPath":"tags","order":"ASCENDING"}],"state":"READY"},{"queryScope":"COLLECTION_GROUP","fields":[{"fieldPath":"tags","order":"DESCENDING"}],"state":"READY"},{"queryScope":"COLLECTION_GROUP","fields":[{"fieldPath":"tags","arrayConfig":"CONTAINS"}],"state":"READY"}],"ancestorField":"projects/peakflow-3a2ed/databases/(default)/collectionGroups/__default__/fields/*"}},{"name":"projects/peakflow-3a2ed/databases/(default)/collectionGroups/tasks/fields/tags","indexConfig":{"indexes":[{"queryScope":"COLLECTION","fields":[{"fieldPath":"tags","arrayConfig":"CONTAINS"}],"state":"READY"}],"ancestorField":"projects/peakflow-3a2ed/databases/(default)/collectionGroups/__default__/fields/*"}}]}
[info] {
  "indexes": [
    {
      "collectionGroup": "accounting_accounts",
      "queryScope": "COLLECTION",
      "fields": [
        {
          "fieldPath": "chartId",
          "order": "ASCENDING"
        },
        {
          "fieldPath": "tenantId",
          "order": "ASCENDING"
        },
        {
          "fieldPath": "code",
          "order": "ASCENDING"
        },
        {
          "fieldPath": "__name__",
          "order": "ASCENDING"
        }
      ],
      "density": "SPARSE_ALL"
    },
    {
      "collectionGroup": "accounting_charts",
      "queryScope": "COLLECTION",
      "fields": [
        {
          "fieldPath": "tenantId",
          "order": "ASCENDING"
        },
        {
          "fieldPath": "createdAt",
          "order": "DESCENDING"
        },
        {
          "fieldPath": "__name__",
          "order": "DESCENDING"
        }
      ],
      "density": "SPARSE_ALL"
    },
    {
      "collectionGroup": "bank_statements",
      "queryScope": "COLLECTION",
      "fields": [
        {
          "fieldPath": "companyId",
          "order": "ASCENDING"
        },
        {
          "fieldPath": "uploadedAt",
          "order": "DESCENDING"
        },
        {
          "fieldPath": "__name__",
          "order": "DESCENDING"
        }
      ],
      "density": "SPARSE_ALL"
    },
    {
      "collectionGroup": "bankAccounts",
      "queryScope": "COLLECTION",
      "fields": [
        {
          "fieldPath": "status",
          "order": "ASCENDING"
        },
        {
          "fieldPath": "createdAt",
          "order": "DESCENDING"
        },
        {
          "fieldPath": "__name__",
          "order": "DESCENDING"
        }
      ],
      "density": "SPARSE_ALL"
    },
    {
      "collectionGroup": "bankStatements",
      "queryScope": "COLLECTION",
      "fields": [
        {
          "fieldPath": "accountInfo.accountNumber",
          "order": "ASCENDING"
        },
        {
          "fieldPath": "summary.statementPeriod.from",
          "order": "DESCENDING"
        },
        {
          "fieldPath": "__name__",
          "order": "DESCENDING"
        }
      ],
      "density": "SPARSE_ALL"
    },
    {
      "collectionGroup": "chartOfAccounts",
      "queryScope": "COLLECTION",
      "fields": [
        {
          "fieldPath": "isActive",
          "order": "ASCENDING"
        },
        {
          "fieldPath": "type",
          "order": "ASCENDING"
        },
        {
          "fieldPath": "code",
          "order": "ASCENDING"
        },
        {
          "fieldPath": "__name__",
          "order": "ASCENDING"
        }
      ],
      "density": "SPARSE_ALL"
    },
    {
      "collectionGroup": "companies",
      "queryScope": "COLLECTION",
      "fields": [
        {
          "fieldPath": "isActive",
          "order": "ASCENDING"
        },
        {
          "fieldPath": "name",
          "order": "ASCENDING"
        },
        {
          "fieldPath": "__name__",
          "order": "ASCENDING"
        }
      ],
      "density": "SPARSE_ALL"
    },
    {
      "collectionGroup": "companies",
      "queryScope": "COLLECTION",
      "fields": [
        {
          "fieldPath": "type",
          "order": "ASCENDING"
        },
        {
          "fieldPath": "createdAt",
          "order": "DESCENDING"
        },
        {
          "fieldPath": "__name__",
          "order": "DESCENDING"
        }
      ],
      "density": "SPARSE_ALL"
    },
    {
      "collectionGroup": "creditNotes",
      "queryScope": "COLLECTION",
      "fields": [
        {
          "fieldPath": "customerId",
          "order": "ASCENDING"
        },
        {
          "fieldPath": "type",
          "order": "ASCENDING"
        },
        {
          "fieldPath": "creditNoteDate",
          "order": "ASCENDING"
        },
        {
          "fieldPath": "__name__",
          "order": "ASCENDING"
        }
      ],
      "density": "SPARSE_ALL"
    },
    {
      "collectionGroup": "creditNotes",
      "queryScope": "COLLECTION",
      "fields": [
        {
          "fieldPath": "type",
          "order": "ASCENDING"
        },
        {
          "fieldPath": "creditNoteDate",
          "order": "DESCENDING"
        },
        {
          "fieldPath": "__name__",
          "order": "DESCENDING"
        }
      ],
      "density": "SPARSE_ALL"
    },
    {
      "collectionGroup": "fiscal_periods",
      "queryScope": "COLLECTION",
      "fields": [
        {
          "fieldPath": "tenantId",
          "order": "ASCENDING"
        },
        {
          "fieldPath": "endDate",
          "order": "ASCENDING"
        },
        {
          "fieldPath": "startDate",
          "order": "ASCENDING"
        },
        {
          "fieldPath": "__name__",
          "order": "ASCENDING"
        }
      ],
      "density": "SPARSE_ALL"
    },
    {
      "collectionGroup": "fiscal_periods",
      "queryScope": "COLLECTION",
      "fields": [
        {
          "fieldPath": "tenantId",
          "order": "ASCENDING"
        },
        {
          "fieldPath": "startDate",
          "order": "DESCENDING"
        },
        {
          "fieldPath": "__name__",
          "order": "DESCENDING"
        }
      ],
      "density": "SPARSE_ALL"
    },
    {
      "collectionGroup": "general_ledger",
      "queryScope": "COLLECTION",
      "fields": [
        {
          "fieldPath": "accountCode",
          "order": "ASCENDING"
        },
        {
          "fieldPath": "tenantId",
          "order": "ASCENDING"
        },
        {
          "fieldPath": "transactionDate",
          "order": "ASCENDING"
        },
        {
          "fieldPath": "__name__",
          "order": "ASCENDING"
        }
      ],
      "density": "SPARSE_ALL"
    },
    {
      "collectionGroup": "general_ledger",
      "queryScope": "COLLECTION",
      "fields": [
        {
          "fieldPath": "tenantId",
          "order": "ASCENDING"
        },
        {
          "fieldPath": "transactionDate",
          "order": "ASCENDING"
        },
        {
          "fieldPath": "__name__",
          "order": "ASCENDING"
        }
      ],
      "density": "SPARSE_ALL"
    },
    {
      "collectionGroup": "glMappingRules",
      "queryScope": "COLLECTION",
      "fields": [
        {
          "fieldPath": "isActive",
          "order": "ASCENDING"
        },
        {
          "fieldPath": "priority",
          "order": "ASCENDING"
        },
        {
          "fieldPath": "__name__",
          "order": "ASCENDING"
        }
      ],
      "density": "SPARSE_ALL"
    },
    {
      "collectionGroup": "invoices",
      "queryScope": "COLLECTION",
      "fields": [
        {
          "fieldPath": "customerId",
          "order": "ASCENDING"
        },
        {
          "fieldPath": "invoiceDate",
          "order": "ASCENDING"
        },
        {
          "fieldPath": "__name__",
          "order": "ASCENDING"
        }
      ],
      "density": "SPARSE_ALL"
    },
    {
      "collectionGroup": "invoices",
      "queryScope": "COLLECTION",
      "fields": [
        {
          "fieldPath": "debtorId",
          "order": "ASCENDING"
        },
        {
          "fieldPath": "invoiceDate",
          "order": "ASCENDING"
        },
        {
          "fieldPath": "__name__",
          "order": "ASCENDING"
        }
      ],
      "density": "SPARSE_ALL"
    },
    {
      "collectionGroup": "invoices",
      "queryScope": "COLLECTION",
      "fields": [
        {
          "fieldPath": "status",
          "order": "ASCENDING"
        },
        {
          "fieldPath": "invoiceDate",
          "order": "ASCENDING"
        },
        {
          "fieldPath": "__name__",
          "order": "ASCENDING"
        }
      ],
      "density": "SPARSE_ALL"
    },
    {
      "collectionGroup": "journal_entries",
      "queryScope": "COLLECTION",
      "fields": [
        {
          "fieldPath": "source",
          "order": "ASCENDING"
        },
        {
          "fieldPath": "tenantId",
          "order": "ASCENDING"
        },
        {
          "fieldPath": "transactionDate",
          "order": "ASCENDING"
        },
        {
          "fieldPath": "__name__",
          "order": "ASCENDING"
        }
      ],
      "density": "SPARSE_ALL"
    },
    {
      "collectionGroup": "journal_entries",
      "queryScope": "COLLECTION",
      "fields": [
        {
          "fieldPath": "tenantId",
          "order": "ASCENDING"
        },
        {
          "fieldPath": "transactionDate",
          "order": "ASCENDING"
        },
        {
          "fieldPath": "__name__",
          "order": "ASCENDING"
        }
      ],
      "density": "SPARSE_ALL"
    },
    {
      "collectionGroup": "journal_entries",
      "queryScope": "COLLECTION",
      "fields": [
        {
          "fieldPath": "tenantId",
          "order": "ASCENDING"
        },
        {
          "fieldPath": "transactionDate",
          "order": "DESCENDING"
        },
        {
          "fieldPath": "__name__",
          "order": "DESCENDING"
        }
      ],
      "density": "SPARSE_ALL"
    },
    {
      "collectionGroup": "ledgerEntries",
      "queryScope": "COLLECTION",
      "fields": [
        {
          "fieldPath": "accountId",
          "order": "ASCENDING"
        },
        {
          "fieldPath": "transactionDate",
          "order": "DESCENDING"
        },
        {
          "fieldPath": "__name__",
          "order": "DESCENDING"
        }
      ],
      "density": "SPARSE_ALL"
    },
    {
      "collectionGroup": "ledgerEntries",
      "queryScope": "COLLECTION",
      "fields": [
        {
          "fieldPath": "bankAccountId",
          "order": "ASCENDING"
        },
        {
          "fieldPath": "transactionDate",
          "order": "DESCENDING"
        },
        {
          "fieldPath": "__name__",
          "order": "DESCENDING"
        }
      ],
      "density": "SPARSE_ALL"
    },
    {
      "collectionGroup": "payments",
      "queryScope": "COLLECTION",
      "fields": [
        {
          "fieldPath": "debtorId",
          "order": "ASCENDING"
        },
        {
          "fieldPath": "paymentDate",
          "order": "ASCENDING"
        },
        {
          "fieldPath": "__name__",
          "order": "ASCENDING"
        }
      ],
      "density": "SPARSE_ALL"
    },
    {
      "collectionGroup": "schedules",
      "queryScope": "COLLECTION",
      "fields": [
        {
          "fieldPath": "companyId",
          "order": "ASCENDING"
        },
        {
          "fieldPath": "industryType",
          "order": "ASCENDING"
        },
        {
          "fieldPath": "createdAt",
          "order": "DESCENDING"
        },
        {
          "fieldPath": "__name__",
          "order": "DESCENDING"
        }
      ],
      "density": "SPARSE_ALL"
    },
    {
      "collectionGroup": "schedules",
      "queryScope": "COLLECTION",
      "fields": [
        {
          "fieldPath": "companyId",
          "order": "ASCENDING"
        },
        {
          "fieldPath": "status",
          "order": "ASCENDING"
        },
        {
          "fieldPath": "nextScheduledDate",
          "order": "ASCENDING"
        },
        {
          "fieldPath": "__name__",
          "order": "ASCENDING"
        }
      ],
      "density": "SPARSE_ALL"
    },
    {
      "collectionGroup": "statements",
      "queryScope": "COLLECTION",
      "fields": [
        {
          "fieldPath": "customerId",
          "order": "ASCENDING"
        },
        {
          "fieldPath": "entityType",
          "order": "ASCENDING"
        },
        {
          "fieldPath": "periodEnd",
          "order": "DESCENDING"
        },
        {
          "fieldPath": "__name__",
          "order": "DESCENDING"
        }
      ],
      "density": "SPARSE_ALL"
    },
    {
      "collectionGroup": "statements",
      "queryScope": "COLLECTION",
      "fields": [
        {
          "fieldPath": "entityType",
          "order": "ASCENDING"
        },
        {
          "fieldPath": "createdAt",
          "order": "DESCENDING"
        },
        {
          "fieldPath": "__name__",
          "order": "DESCENDING"
        }
      ],
      "density": "SPARSE_ALL"
    },
    {
      "collectionGroup": "tasks",
      "queryScope": "COLLECTION",
      "fields": [
        {
          "fieldPath": "companyId",
          "order": "ASCENDING"
        },
        {
          "fieldPath": "assigneeId",
          "order": "ASCENDING"
        },
        {
          "fieldPath": "status",
          "order": "ASCENDING"
        },
        {
          "fieldPath": "__name__",
          "order": "ASCENDING"
        }
      ],
      "density": "SPARSE_ALL"
    },
    {
      "collectionGroup": "tasks",
      "queryScope": "COLLECTION",
      "fields": [
        {
          "fieldPath": "companyId",
          "order": "ASCENDING"
        },
        {
          "fieldPath": "status",
          "order": "ASCENDING"
        },
        {
          "fieldPath": "dueDate",
          "order": "ASCENDING"
        },
        {
          "fieldPath": "__name__",
          "order": "ASCENDING"
        }
      ],
      "density": "SPARSE_ALL"
    },
    {
      "collectionGroup": "tasks",
      "queryScope": "COLLECTION",
      "fields": [
        {
          "fieldPath": "companyId",
          "order": "ASCENDING"
        },
        {
          "fieldPath": "type",
          "order": "ASCENDING"
        },
        {
          "fieldPath": "createdAt",
          "order": "DESCENDING"
        },
        {
          "fieldPath": "__name__",
          "order": "DESCENDING"
        }
      ],
      "density": "SPARSE_ALL"
    },
    {
      "collectionGroup": "users",
      "queryScope": "COLLECTION",
      "fields": [
        {
          "fieldPath": "companyId",
          "order": "ASCENDING"
        },
        {
          "fieldPath": "createdAt",
          "order": "DESCENDING"
        },
        {
          "fieldPath": "__name__",
          "order": "DESCENDING"
        }
      ],
      "density": "SPARSE_ALL"
    },
    {
      "collectionGroup": "users",
      "queryScope": "COLLECTION",
      "fields": [
        {
          "fieldPath": "companyId",
          "order": "ASCENDING"
        },
        {
          "fieldPath": "fullName",
          "order": "ASCENDING"
        },
        {
          "fieldPath": "__name__",
          "order": "ASCENDING"
        }
      ],
      "density": "SPARSE_ALL"
    },
    {
      "collectionGroup": "users",
      "queryScope": "COLLECTION",
      "fields": [
        {
          "fieldPath": "companyId",
          "order": "ASCENDING"
        },
        {
          "fieldPath": "roles",
          "arrayConfig": "CONTAINS"
        },
        {
          "fieldPath": "__name__",
          "order": "ASCENDING"
        }
      ],
      "density": "SPARSE_ALL"
    },
    {
      "collectionGroup": "users",
      "queryScope": "COLLECTION",
      "fields": [
        {
          "fieldPath": "isActive",
          "order": "ASCENDING"
        },
        {
          "fieldPath": "companyId",
          "order": "ASCENDING"
        },
        {
          "fieldPath": "__name__",
          "order": "ASCENDING"
        }
      ],
      "density": "SPARSE_ALL"
    }
  ],
  "fieldOverrides": [
    {
      "collectionGroup": "schedules",
      "fieldPath": "tags",
      "ttl": false,
      "indexes": [
        {
          "order": "ASCENDING",
          "queryScope": "COLLECTION"
        },
        {
          "order": "DESCENDING",
          "queryScope": "COLLECTION"
        },
        {
          "arrayConfig": "CONTAINS",
          "queryScope": "COLLECTION"
        },
        {
          "order": "ASCENDING",
          "queryScope": "COLLECTION_GROUP"
        },
        {
          "order": "DESCENDING",
          "queryScope": "COLLECTION_GROUP"
        },
        {
          "arrayConfig": "CONTAINS",
          "queryScope": "COLLECTION_GROUP"
        }
      ]
    },
    {
      "collectionGroup": "tasks",
      "fieldPath": "tags",
      "ttl": false,
      "indexes": [
        {
          "arrayConfig": "CONTAINS",
          "queryScope": "COLLECTION"
        }
      ]
    }
  ]
}
[debug] [2025-10-21T00:53:22.430Z] ----------------------------------------------------------------------
[debug] [2025-10-21T00:53:22.432Z] Command:       /home/dachu/.nvm/versions/node/v22.20.0/bin/node /home/dachu/.nvm/versions/node/v22.20.0/bin/firebase deploy --only firestore:indexes --project peakflow-3a2ed
[debug] [2025-10-21T00:53:22.432Z] CLI Version:   14.20.0
[debug] [2025-10-21T00:53:22.432Z] Platform:      linux
[debug] [2025-10-21T00:53:22.433Z] Node Version:  v22.20.0
[debug] [2025-10-21T00:53:22.433Z] Time:          Tue Oct 21 2025 02:53:22 GMT+0200 (Central Africa Time)
[debug] [2025-10-21T00:53:22.433Z] ----------------------------------------------------------------------
[debug] 
[debug] [2025-10-21T00:53:22.579Z] > command requires scopes: ["email","openid","https://www.googleapis.com/auth/cloudplatformprojects.readonly","https://www.googleapis.com/auth/firebase","https://www.googleapis.com/auth/cloud-platform"]
[debug] [2025-10-21T00:53:22.580Z] > authorizing via signed-in user (brpotch@gmail.com)
[debug] [2025-10-21T00:53:22.580Z] [iam] checking project peakflow-3a2ed for permissions ["datastore.indexes.create","datastore.indexes.delete","datastore.indexes.list","datastore.indexes.update","firebase.projects.get"]
[debug] [2025-10-21T00:53:22.580Z] Checked if tokens are valid: true, expires at: 1761011462499
[debug] [2025-10-21T00:53:22.580Z] Checked if tokens are valid: true, expires at: 1761011462499
[debug] [2025-10-21T00:53:22.581Z] >>> [apiv2][query] POST https://cloudresourcemanager.googleapis.com/v1/projects/peakflow-3a2ed:testIamPermissions [none]
[debug] [2025-10-21T00:53:22.581Z] >>> [apiv2][(partial)header] POST https://cloudresourcemanager.googleapis.com/v1/projects/peakflow-3a2ed:testIamPermissions x-goog-quota-user=projects/peakflow-3a2ed
[debug] [2025-10-21T00:53:22.581Z] >>> [apiv2][body] POST https://cloudresourcemanager.googleapis.com/v1/projects/peakflow-3a2ed:testIamPermissions {"permissions":["datastore.indexes.create","datastore.indexes.delete","datastore.indexes.list","datastore.indexes.update","firebase.projects.get"]}
[debug] [2025-10-21T00:53:24.410Z] <<< [apiv2][status] POST https://cloudresourcemanager.googleapis.com/v1/projects/peakflow-3a2ed:testIamPermissions 200
[debug] [2025-10-21T00:53:24.411Z] <<< [apiv2][body] POST https://cloudresourcemanager.googleapis.com/v1/projects/peakflow-3a2ed:testIamPermissions {"permissions":["datastore.indexes.create","datastore.indexes.delete","datastore.indexes.list","datastore.indexes.update","firebase.projects.get"]}
[info] 
[info] === Deploying to 'peakflow-3a2ed'...
[info] 
[info] i  deploying firestore 
[info] i  firestore: ensuring required API firestore.googleapis.com is enabled... 
[info] i  firestore: ensuring required API firestore.googleapis.com is enabled... 
[debug] [2025-10-21T00:53:24.418Z] Checked if tokens are valid: true, expires at: 1761011462499
[debug] [2025-10-21T00:53:24.418Z] Checked if tokens are valid: true, expires at: 1761011462499
[debug] [2025-10-21T00:53:24.418Z] >>> [apiv2][query] GET https://firestore.googleapis.com/v1/projects/peakflow-3a2ed/databases/(default) [none]
[debug] [2025-10-21T00:53:24.673Z] *** [apiv2] error from fetch(https://firestore.googleapis.com/v1/projects/peakflow-3a2ed/databases/(default), {"headers":{},"method":"GET"}): FetchError: request to https://firestore.googleapis.com/v1/projects/peakflow-3a2ed/databases/(default) failed, reason: 
[info] i  firestore: reading indexes from firestore.indexes.json... 
[info] i  cloud.firestore: checking firestore.rules for compilation errors... 
[debug] [2025-10-21T00:53:24.678Z] Checked if tokens are valid: true, expires at: 1761011462499
[debug] [2025-10-21T00:53:24.678Z] Checked if tokens are valid: true, expires at: 1761011462499
[debug] [2025-10-21T00:53:24.678Z] >>> [apiv2][query] POST https://firebaserules.googleapis.com/v1/projects/peakflow-3a2ed:test [none]
[debug] [2025-10-21T00:53:24.679Z] >>> [apiv2][body] POST https://firebaserules.googleapis.com/v1/projects/peakflow-3a2ed:test [omitted]
[debug] [2025-10-21T00:53:27.013Z] <<< [apiv2][status] POST https://firebaserules.googleapis.com/v1/projects/peakflow-3a2ed:test 200
[debug] [2025-10-21T00:53:27.014Z] <<< [apiv2][body] POST https://firebaserules.googleapis.com/v1/projects/peakflow-3a2ed:test {}
[info] ✔  cloud.firestore: rules file firestore.rules compiled successfully 
[info] i  firestore: deploying indexes... 
[debug] [2025-10-21T00:53:27.018Z] Checked if tokens are valid: true, expires at: 1761011462499
[debug] [2025-10-21T00:53:27.018Z] Checked if tokens are valid: true, expires at: 1761011462499
[debug] [2025-10-21T00:53:27.018Z] >>> [apiv2][query] GET https://firestore.googleapis.com/v1/projects/peakflow-3a2ed/databases/(default)/collectionGroups/-/indexes [none]
[debug] [2025-10-21T00:53:27.274Z] *** [apiv2] error from fetch(https://firestore.googleapis.com/v1/projects/peakflow-3a2ed/databases/(default)/collectionGroups/-/indexes, {"headers":{},"method":"GET"}): FetchError: request to https://firestore.googleapis.com/v1/projects/peakflow-3a2ed/databases/(default)/collectionGroups/-/indexes failed, reason: 
[debug] [2025-10-21T00:53:28.635Z] FetchError: request to https://firestore.googleapis.com/v1/projects/peakflow-3a2ed/databases/(default)/collectionGroups/-/indexes failed, reason: 
    at ClientRequest.<anonymous> (/home/dachu/.nvm/versions/node/v22.20.0/lib/node_modules/firebase-tools/node_modules/node-fetch/lib/index.js:1501:11)
    at ClientRequest.emit (node:events:519:28)
    at ClientRequest.emit (node:domain:489:12)
    at emitErrorEvent (node:_http_client:105:11)
    at TLSSocket.socketErrorListener (node:_http_client:518:5)
    at TLSSocket.emit (node:events:519:28)
    at TLSSocket.emit (node:domain:489:12)
    at emitErrorNT (node:internal/streams/destroy:170:8)
    at emitErrorCloseNT (node:internal/streams/destroy:129:3)
    at process.processTicksAndRejections (node:internal/process/task_queues:90:21)
[error] 
[error] Error: Failed to make request to https://firestore.googleapis.com/v1/projects/peakflow-3a2ed/databases/(default)/collectionGroups/-/indexes
[debug] [2025-10-21T02:32:06.610Z] ----------------------------------------------------------------------
[debug] [2025-10-21T02:32:06.612Z] Command:       /home/dachu/.nvm/versions/node/v22.20.0/bin/node /home/dachu/.nvm/versions/node/v22.20.0/bin/firebase deploy --only firestore:indexes --project peakflow-3a2ed
[debug] [2025-10-21T02:32:06.612Z] CLI Version:   14.20.0
[debug] [2025-10-21T02:32:06.612Z] Platform:      linux
[debug] [2025-10-21T02:32:06.612Z] Node Version:  v22.20.0
[debug] [2025-10-21T02:32:06.612Z] Time:          Tue Oct 21 2025 04:32:06 GMT+0200 (Central Africa Time)
[debug] [2025-10-21T02:32:06.613Z] ----------------------------------------------------------------------
[debug] 
[debug] [2025-10-21T02:32:06.760Z] > command requires scopes: ["email","openid","https://www.googleapis.com/auth/cloudplatformprojects.readonly","https://www.googleapis.com/auth/firebase","https://www.googleapis.com/auth/cloud-platform"]
[debug] [2025-10-21T02:32:06.761Z] > authorizing via signed-in user (brpotch@gmail.com)
[debug] [2025-10-21T02:32:06.761Z] [iam] checking project peakflow-3a2ed for permissions ["datastore.indexes.create","datastore.indexes.delete","datastore.indexes.list","datastore.indexes.update","firebase.projects.get"]
[debug] [2025-10-21T02:32:06.762Z] Checked if tokens are valid: false, expires at: 1761011462499
[debug] [2025-10-21T02:32:06.762Z] Checked if tokens are valid: false, expires at: 1761011462499
[debug] [2025-10-21T02:32:06.762Z] > refreshing access token with scopes: []
[debug] [2025-10-21T02:32:06.763Z] >>> [apiv2][query] POST https://www.googleapis.com/oauth2/v3/token [none]
[debug] [2025-10-21T02:32:06.764Z] >>> [apiv2][body] POST https://www.googleapis.com/oauth2/v3/token [omitted]
[debug] [2025-10-21T02:32:07.346Z] <<< [apiv2][status] POST https://www.googleapis.com/oauth2/v3/token 200
[debug] [2025-10-21T02:32:07.346Z] <<< [apiv2][body] POST https://www.googleapis.com/oauth2/v3/token [omitted]
[debug] [2025-10-21T02:32:07.358Z] >>> [apiv2][query] POST https://cloudresourcemanager.googleapis.com/v1/projects/peakflow-3a2ed:testIamPermissions [none]
[debug] [2025-10-21T02:32:07.359Z] >>> [apiv2][(partial)header] POST https://cloudresourcemanager.googleapis.com/v1/projects/peakflow-3a2ed:testIamPermissions x-goog-quota-user=projects/peakflow-3a2ed
[debug] [2025-10-21T02:32:07.359Z] >>> [apiv2][body] POST https://cloudresourcemanager.googleapis.com/v1/projects/peakflow-3a2ed:testIamPermissions {"permissions":["datastore.indexes.create","datastore.indexes.delete","datastore.indexes.list","datastore.indexes.update","firebase.projects.get"]}
[debug] [2025-10-21T02:32:09.378Z] <<< [apiv2][status] POST https://cloudresourcemanager.googleapis.com/v1/projects/peakflow-3a2ed:testIamPermissions 200
[debug] [2025-10-21T02:32:09.379Z] <<< [apiv2][body] POST https://cloudresourcemanager.googleapis.com/v1/projects/peakflow-3a2ed:testIamPermissions {"permissions":["datastore.indexes.create","datastore.indexes.delete","datastore.indexes.list","datastore.indexes.update","firebase.projects.get"]}
[info] 
[info] === Deploying to 'peakflow-3a2ed'...
[info] 
[info] i  deploying firestore 
[info] i  firestore: ensuring required API firestore.googleapis.com is enabled... 
[info] i  firestore: ensuring required API firestore.googleapis.com is enabled... 
[debug] [2025-10-21T02:32:09.383Z] Checked if tokens are valid: true, expires at: 1761017526347
[debug] [2025-10-21T02:32:09.383Z] Checked if tokens are valid: true, expires at: 1761017526347
[debug] [2025-10-21T02:32:09.383Z] >>> [apiv2][query] GET https://firestore.googleapis.com/v1/projects/peakflow-3a2ed/databases/(default) [none]
[debug] [2025-10-21T02:32:11.256Z] <<< [apiv2][status] GET https://firestore.googleapis.com/v1/projects/peakflow-3a2ed/databases/(default) 200
[debug] [2025-10-21T02:32:11.257Z] <<< [apiv2][body] GET https://firestore.googleapis.com/v1/projects/peakflow-3a2ed/databases/(default) {"name":"projects/peakflow-3a2ed/databases/(default)","uid":"50985e32-a12a-4059-9b1d-eef79d866ef5","createTime":"2025-07-12T19:56:29.695403Z","updateTime":"2025-07-12T19:56:29.695403Z","locationId":"nam5","type":"FIRESTORE_NATIVE","concurrencyMode":"PESSIMISTIC","versionRetentionPeriod":"3600s","earliestVersionTime":"2025-10-21T01:32:11.069375Z","appEngineIntegrationMode":"DISABLED","keyPrefix":"s","pointInTimeRecoveryEnablement":"POINT_IN_TIME_RECOVERY_DISABLED","deleteProtectionState":"DELETE_PROTECTION_DISABLED","databaseEdition":"STANDARD","freeTier":true,"realtimeUpdatesMode":"REALTIME_UPDATES_MODE_ENABLED","etag":"IKKZuY6gtJADMIizs/+suY4D"}
[info] i  firestore: reading indexes from firestore.indexes.json... 
[info] i  cloud.firestore: checking firestore.rules for compilation errors... 
[debug] [2025-10-21T02:32:11.259Z] Checked if tokens are valid: true, expires at: 1761017526347
[debug] [2025-10-21T02:32:11.259Z] Checked if tokens are valid: true, expires at: 1761017526347
[debug] [2025-10-21T02:32:11.259Z] >>> [apiv2][query] POST https://firebaserules.googleapis.com/v1/projects/peakflow-3a2ed:test [none]
[debug] [2025-10-21T02:32:11.259Z] >>> [apiv2][body] POST https://firebaserules.googleapis.com/v1/projects/peakflow-3a2ed:test [omitted]
[debug] [2025-10-21T02:32:12.888Z] <<< [apiv2][status] POST https://firebaserules.googleapis.com/v1/projects/peakflow-3a2ed:test 200
[debug] [2025-10-21T02:32:12.889Z] <<< [apiv2][body] POST https://firebaserules.googleapis.com/v1/projects/peakflow-3a2ed:test {}
[info] ✔  cloud.firestore: rules file firestore.rules compiled successfully 
[info] i  firestore: deploying indexes... 
[debug] [2025-10-21T02:32:12.891Z] Checked if tokens are valid: true, expires at: 1761017526347
[debug] [2025-10-21T02:32:12.891Z] Checked if tokens are valid: true, expires at: 1761017526347
[debug] [2025-10-21T02:32:12.892Z] >>> [apiv2][query] GET https://firestore.googleapis.com/v1/projects/peakflow-3a2ed/databases/(default)/collectionGroups/-/indexes [none]
[debug] [2025-10-21T02:32:13.267Z] <<< [apiv2][status] GET https://firestore.googleapis.com/v1/projects/peakflow-3a2ed/databases/(default)/collectionGroups/-/indexes 200
[debug] [2025-10-21T02:32:13.267Z] <<< [apiv2][body] GET https://firestore.googleapis.com/v1/projects/peakflow-3a2ed/databases/(default)/collectionGroups/-/indexes {"indexes":[{"name":"projects/peakflow-3a2ed/databases/(default)/collectionGroups/bankAccounts/indexes/CICAgLjy8IAJ","queryScope":"COLLECTION","fields":[{"fieldPath":"status","order":"ASCENDING"},{"fieldPath":"createdAt","order":"DESCENDING"},{"fieldPath":"__name__","order":"DESCENDING"}],"state":"READY","density":"SPARSE_ALL"},{"name":"projects/peakflow-3a2ed/databases/(default)/collectionGroups/invoices/indexes/CICAgPjChIAK","queryScope":"COLLECTION","fields":[{"fieldPath":"status","order":"ASCENDING"},{"fieldPath":"invoiceDate","order":"ASCENDING"},{"fieldPath":"__name__","order":"ASCENDING"}],"state":"READY","density":"SPARSE_ALL"},{"name":"projects/peakflow-3a2ed/databases/(default)/collectionGroups/companies/indexes/CICAgNiav4AK","queryScope":"COLLECTION","fields":[{"fieldPath":"isActive","order":"ASCENDING"},{"fieldPath":"name","order":"ASCENDING"},{"fieldPath":"__name__","order":"ASCENDING"}],"state":"READY","density":"SPARSE_ALL"},{"name":"projects/peakflow-3a2ed/databases/(default)/collectionGroups/tasks/indexes/CICAgJim14AK","queryScope":"COLLECTION","fields":[{"fieldPath":"companyId","order":"ASCENDING"},{"fieldPath":"type","order":"ASCENDING"},{"fieldPath":"createdAt","order":"DESCENDING"},{"fieldPath":"__name__","order":"DESCENDING"}],"state":"READY","density":"SPARSE_ALL"},{"name":"projects/peakflow-3a2ed/databases/(default)/collectionGroups/chartOfAccounts/indexes/CICAgLjy8IAK","queryScope":"COLLECTION","fields":[{"fieldPath":"isActive","order":"ASCENDING"},{"fieldPath":"type","order":"ASCENDING"},{"fieldPath":"code","order":"ASCENDING"},{"fieldPath":"__name__","order":"ASCENDING"}],"state":"READY","density":"SPARSE_ALL"},{"name":"projects/peakflow-3a2ed/databases/(default)/collectionGroups/tasks/indexes/CICAgOjXh4EK","queryScope":"COLLECTION","fields":[{"fieldPath":"companyId","order":"ASCENDING"},{"fieldPath":"status","order":"ASCENDING"},{"fieldPath":"dueDate","order":"ASCENDING"},{"fieldPath":"__name__","order":"ASCENDING"}],"state":"READY","density":"SPARSE_ALL"},{"name":"projects/peakflow-3a2ed/databases/(default)/collectionGroups/ledgerEntries/indexes/CICAgNiroIEK","queryScope":"COLLECTION","fields":[{"fieldPath":"bankAccountId","order":"ASCENDING"},{"fieldPath":"transactionDate","order":"DESCENDING"},{"fieldPath":"__name__","order":"DESCENDING"}],"state":"READY","density":"SPARSE_ALL"},{"name":"projects/peakflow-3a2ed/databases/(default)/collectionGroups/fiscal_periods/indexes/CICAgLiT6IEK","queryScope":"COLLECTION","fields":[{"fieldPath":"tenantId","order":"ASCENDING"},{"fieldPath":"endDate","order":"ASCENDING"},{"fieldPath":"startDate","order":"ASCENDING"},{"fieldPath":"__name__","order":"ASCENDING"}],"state":"READY","density":"SPARSE_ALL"},{"name":"projects/peakflow-3a2ed/databases/(default)/collectionGroups/accounting_accounts/indexes/CICAgNjpgYIK","queryScope":"COLLECTION","fields":[{"fieldPath":"chartId","order":"ASCENDING"},{"fieldPath":"tenantId","order":"ASCENDING"},{"fieldPath":"code","order":"ASCENDING"},{"fieldPath":"__name__","order":"ASCENDING"}],"state":"READY","density":"SPARSE_ALL"},{"name":"projects/peakflow-3a2ed/databases/(default)/collectionGroups/general_ledger/indexes/CICAgPj-pYIK","queryScope":"COLLECTION","fields":[{"fieldPath":"tenantId","order":"ASCENDING"},{"fieldPath":"transactionDate","order":"ASCENDING"},{"fieldPath":"__name__","order":"ASCENDING"}],"state":"READY","density":"SPARSE_ALL"},{"name":"projects/peakflow-3a2ed/databases/(default)/collectionGroups/fiscal_periods/indexes/CICAgLjRyYIK","queryScope":"COLLECTION","fields":[{"fieldPath":"tenantId","order":"ASCENDING"},{"fieldPath":"startDate","order":"DESCENDING"},{"fieldPath":"__name__","order":"DESCENDING"}],"state":"READY","density":"SPARSE_ALL"},{"name":"projects/peakflow-3a2ed/databases/(default)/collectionGroups/schedules/indexes/CICAgJjF9oIK","queryScope":"COLLECTION","fields":[{"fieldPath":"companyId","order":"ASCENDING"},{"fieldPath":"industryType","order":"ASCENDING"},{"fieldPath":"createdAt","order":"DESCENDING"},{"fieldPath":"__name__","order":"DESCENDING"}],"state":"READY","density":"SPARSE_ALL"},{"name":"projects/peakflow-3a2ed/databases/(default)/collectionGroups/bankStatements/indexes/CICAgLiIkYMK","queryScope":"COLLECTION","fields":[{"fieldPath":"accountInfo.accountNumber","order":"ASCENDING"},{"fieldPath":"summary.statementPeriod.from","order":"DESCENDING"},{"fieldPath":"__name__","order":"DESCENDING"}],"state":"READY","density":"SPARSE_ALL"},{"name":"projects/peakflow-3a2ed/databases/(default)/collectionGroups/tasks/indexes/CICAgJiUpoMK","queryScope":"COLLECTION","fields":[{"fieldPath":"companyId","order":"ASCENDING"},{"fieldPath":"assigneeId","order":"ASCENDING"},{"fieldPath":"status","order":"ASCENDING"},{"fieldPath":"__name__","order":"ASCENDING"}],"state":"READY","density":"SPARSE_ALL"},{"name":"projects/peakflow-3a2ed/databases/(default)/collectionGroups/statements/indexes/CICAgPig2YMK","queryScope":"COLLECTION","fields":[{"fieldPath":"entityType","order":"ASCENDING"},{"fieldPath":"createdAt","order":"DESCENDING"},{"fieldPath":"__name__","order":"DESCENDING"}],"state":"READY","density":"SPARSE_ALL"},{"name":"projects/peakflow-3a2ed/databases/(default)/collectionGroups/users/indexes/CICAgNi47oMK","queryScope":"COLLECTION","fields":[{"fieldPath":"companyId","order":"ASCENDING"},{"fieldPath":"createdAt","order":"DESCENDING"},{"fieldPath":"__name__","order":"DESCENDING"}],"state":"READY","density":"SPARSE_ALL"},{"name":"projects/peakflow-3a2ed/databases/(default)/collectionGroups/statements/indexes/CICAgOi3voUK","queryScope":"COLLECTION","fields":[{"fieldPath":"customerId","order":"ASCENDING"},{"fieldPath":"entityType","order":"ASCENDING"},{"fieldPath":"periodEnd","order":"DESCENDING"},{"fieldPath":"__name__","order":"DESCENDING"}],"state":"READY","density":"SPARSE_ALL"},{"name":"projects/peakflow-3a2ed/databases/(default)/collectionGroups/creditNotes/indexes/CICAgJjUgIcK","queryScope":"COLLECTION","fields":[{"fieldPath":"type","order":"ASCENDING"},{"fieldPath":"creditNoteDate","order":"DESCENDING"},{"fieldPath":"__name__","order":"DESCENDING"}],"state":"READY","density":"SPARSE_ALL"},{"name":"projects/peakflow-3a2ed/databases/(default)/collectionGroups/users/indexes/CICAgJjmnIgK","queryScope":"COLLECTION","fields":[{"fieldPath":"companyId","order":"ASCENDING"},{"fieldPath":"fullName","order":"ASCENDING"},{"fieldPath":"__name__","order":"ASCENDING"}],"state":"READY","density":"SPARSE_ALL"},{"name":"projects/peakflow-3a2ed/databases/(default)/collectionGroups/general_ledger/indexes/CICAgNja0ogK","queryScope":"COLLECTION","fields":[{"fieldPath":"accountCode","order":"ASCENDING"},{"fieldPath":"tenantId","order":"ASCENDING"},{"fieldPath":"transactionDate","order":"ASCENDING"},{"fieldPath":"__name__","order":"ASCENDING"}],"state":"READY","density":"SPARSE_ALL"},{"name":"projects/peakflow-3a2ed/databases/(default)/collectionGroups/users/indexes/CICAgOi39IkK","queryScope":"COLLECTION","fields":[{"fieldPath":"isActive","order":"ASCENDING"},{"fieldPath":"companyId","order":"ASCENDING"},{"fieldPath":"__name__","order":"ASCENDING"}],"state":"READY","density":"SPARSE_ALL"},{"name":"projects/peakflow-3a2ed/databases/(default)/collectionGroups/payments/indexes/CICAgNi4o4sK","queryScope":"COLLECTION","fields":[{"fieldPath":"debtorId","order":"ASCENDING"},{"fieldPath":"paymentDate","order":"ASCENDING"},{"fieldPath":"__name__","order":"ASCENDING"}],"state":"READY","density":"SPARSE_ALL"},{"name":"projects/peakflow-3a2ed/databases/(default)/collectionGroups/users/indexes/CICAgJiUzYsK","queryScope":"COLLECTION","fields":[{"fieldPath":"companyId","order":"ASCENDING"},{"fieldPath":"roles","arrayConfig":"CONTAINS"},{"fieldPath":"__name__","order":"ASCENDING"}],"state":"READY","density":"SPARSE_ALL"},{"name":"projects/peakflow-3a2ed/databases/(default)/collectionGroups/companies/indexes/CICAgOi3kJAK","queryScope":"COLLECTION","fields":[{"fieldPath":"type","order":"ASCENDING"},{"fieldPath":"createdAt","order":"DESCENDING"},{"fieldPath":"__name__","order":"DESCENDING"}],"state":"READY","density":"SPARSE_ALL"},{"name":"projects/peakflow-3a2ed/databases/(default)/collectionGroups/journal_entries/indexes/CICAgNirtJAK","queryScope":"COLLECTION","fields":[{"fieldPath":"tenantId","order":"ASCENDING"},{"fieldPath":"transactionDate","order":"ASCENDING"},{"fieldPath":"__name__","order":"ASCENDING"}],"state":"READY","density":"SPARSE_ALL"},{"name":"projects/peakflow-3a2ed/databases/(default)/collectionGroups/accounting_charts/indexes/CICAgJiH2JAK","queryScope":"COLLECTION","fields":[{"fieldPath":"tenantId","order":"ASCENDING"},{"fieldPath":"createdAt","order":"DESCENDING"},{"fieldPath":"__name__","order":"DESCENDING"}],"state":"READY","density":"SPARSE_ALL"},{"name":"projects/peakflow-3a2ed/databases/(default)/collectionGroups/glMappingRules/indexes/CICAgNjaxJEK","queryScope":"COLLECTION","fields":[{"fieldPath":"isActive","order":"ASCENDING"},{"fieldPath":"priority","order":"ASCENDING"},{"fieldPath":"__name__","order":"ASCENDING"}],"state":"READY","density":"SPARSE_ALL"},{"name":"projects/peakflow-3a2ed/databases/(default)/collectionGroups/schedules/indexes/CICAgJiUsZIK","queryScope":"COLLECTION","fields":[{"fieldPath":"companyId","order":"ASCENDING"},{"fieldPath":"status","order":"ASCENDING"},{"fieldPath":"nextScheduledDate","order":"ASCENDING"},{"fieldPath":"__name__","order":"ASCENDING"}],"state":"READY","density":"SPARSE_ALL"},{"name":"projects/peakflow-3a2ed/databases/(default)/collectionGroups/invoices/indexes/CICAgLjRnZMK","queryScope":"COLLECTION","fields":[{"fieldPath":"customerId","order":"ASCENDING"},{"fieldPath":"invoiceDate","order":"ASCENDING"},{"fieldPath":"__name__","order":"ASCENDING"}],"state":"READY","density":"SPARSE_ALL"},{"name":"projects/peakflow-3a2ed/databases/(default)/collectionGroups/journal_entries/indexes/CICAgNjp5ZMK","queryScope":"COLLECTION","fields":[{"fieldPath":"source","order":"ASCENDING"},{"fieldPath":"tenantId","order":"ASCENDING"},{"fieldPath":"transactionDate","order":"ASCENDING"},{"fieldPath":"__name__","order":"ASCENDING"}],"state":"READY","density":"SPARSE_ALL"},{"name":"projects/peakflow-3a2ed/databases/(default)/collectionGroups/invoices/indexes/CICAgJjUlJYK","queryScope":"COLLECTION","fields":[{"fieldPath":"debtorId","order":"ASCENDING"},{"fieldPath":"invoiceDate","order":"ASCENDING"},{"fieldPath":"__name__","order":"ASCENDING"}],"state":"READY","density":"SPARSE_ALL"},{"name":"projects/peakflow-3a2ed/databases/(default)/collectionGroups/bank_statements/indexes/CICAgOi36pgK","queryScope":"COLLECTION","fields":[{"fieldPath":"companyId","order":"ASCENDING"},{"fieldPath":"uploadedAt","order":"DESCENDING"},{"fieldPath":"__name__","order":"DESCENDING"}],"state":"READY","density":"SPARSE_ALL"},{"name":"projects/peakflow-3a2ed/databases/(default)/collectionGroups/journal_entries/indexes/CICAgJjm-pkK","queryScope":"COLLECTION","fields":[{"fieldPath":"tenantId","order":"ASCENDING"},{"fieldPath":"transactionDate","order":"DESCENDING"},{"fieldPath":"__name__","order":"DESCENDING"}],"state":"READY","density":"SPARSE_ALL"},{"name":"projects/peakflow-3a2ed/databases/(default)/collectionGroups/creditNotes/indexes/CICAgNi4t5oK","queryScope":"COLLECTION","fields":[{"fieldPath":"customerId","order":"ASCENDING"},{"fieldPath":"type","order":"ASCENDING"},{"fieldPath":"creditNoteDate","order":"ASCENDING"},{"fieldPath":"__name__","order":"ASCENDING"}],"state":"READY","density":"SPARSE_ALL"},{"name":"projects/peakflow-3a2ed/databases/(default)/collectionGroups/ledgerEntries/indexes/CICAgJiU25oK","queryScope":"COLLECTION","fields":[{"fieldPath":"accountId","order":"ASCENDING"},{"fieldPath":"transactionDate","order":"DESCENDING"},{"fieldPath":"__name__","order":"DESCENDING"}],"state":"READY","density":"SPARSE_ALL"}]}
[debug] [2025-10-21T02:32:13.267Z] Checked if tokens are valid: true, expires at: 1761017526347
[debug] [2025-10-21T02:32:13.267Z] Checked if tokens are valid: true, expires at: 1761017526347
[debug] [2025-10-21T02:32:13.267Z] >>> [apiv2][query] GET https://firestore.googleapis.com/v1/projects/peakflow-3a2ed/databases/(default)/collectionGroups/-/fields?filter=indexConfig.usesAncestorConfig=false OR ttlConfig:* [none]
[debug] [2025-10-21T02:32:13.657Z] <<< [apiv2][status] GET https://firestore.googleapis.com/v1/projects/peakflow-3a2ed/databases/(default)/collectionGroups/-/fields?filter=indexConfig.usesAncestorConfig=false OR ttlConfig:* 200
[debug] [2025-10-21T02:32:13.658Z] <<< [apiv2][body] GET https://firestore.googleapis.com/v1/projects/peakflow-3a2ed/databases/(default)/collectionGroups/-/fields?filter=indexConfig.usesAncestorConfig=false OR ttlConfig:* {"fields":[{"name":"projects/peakflow-3a2ed/databases/(default)/collectionGroups/__default__/fields/*","indexConfig":{"indexes":[{"queryScope":"COLLECTION","fields":[{"fieldPath":"*","order":"ASCENDING"}],"state":"READY"},{"queryScope":"COLLECTION","fields":[{"fieldPath":"*","order":"DESCENDING"}],"state":"READY"},{"queryScope":"COLLECTION","fields":[{"fieldPath":"*","arrayConfig":"CONTAINS"}],"state":"READY"}]}},{"name":"projects/peakflow-3a2ed/databases/(default)/collectionGroups/schedules/fields/tags","indexConfig":{"indexes":[{"queryScope":"COLLECTION","fields":[{"fieldPath":"tags","order":"ASCENDING"}],"state":"READY"},{"queryScope":"COLLECTION","fields":[{"fieldPath":"tags","order":"DESCENDING"}],"state":"READY"},{"queryScope":"COLLECTION","fields":[{"fieldPath":"tags","arrayConfig":"CONTAINS"}],"state":"READY"},{"queryScope":"COLLECTION_GROUP","fields":[{"fieldPath":"tags","order":"ASCENDING"}],"state":"READY"},{"queryScope":"COLLECTION_GROUP","fields":[{"fieldPath":"tags","order":"DESCENDING"}],"state":"READY"},{"queryScope":"COLLECTION_GROUP","fields":[{"fieldPath":"tags","arrayConfig":"CONTAINS"}],"state":"READY"}],"ancestorField":"projects/peakflow-3a2ed/databases/(default)/collectionGroups/__default__/fields/*"}},{"name":"projects/peakflow-3a2ed/databases/(default)/collectionGroups/tasks/fields/tags","indexConfig":{"indexes":[{"queryScope":"COLLECTION","fields":[{"fieldPath":"tags","arrayConfig":"CONTAINS"}],"state":"READY"}],"ancestorField":"projects/peakflow-3a2ed/databases/(default)/collectionGroups/__default__/fields/*"}}]}
[debug] [2025-10-21T02:32:13.658Z] Checked if tokens are valid: true, expires at: 1761017526347
[debug] [2025-10-21T02:32:13.658Z] Checked if tokens are valid: true, expires at: 1761017526347
[debug] [2025-10-21T02:32:13.658Z] >>> [apiv2][query] GET https://firestore.googleapis.com/v1/projects/peakflow-3a2ed/databases/(default) [none]
[debug] [2025-10-21T02:32:14.046Z] <<< [apiv2][status] GET https://firestore.googleapis.com/v1/projects/peakflow-3a2ed/databases/(default) 200
[debug] [2025-10-21T02:32:14.046Z] <<< [apiv2][body] GET https://firestore.googleapis.com/v1/projects/peakflow-3a2ed/databases/(default) {"name":"projects/peakflow-3a2ed/databases/(default)","uid":"50985e32-a12a-4059-9b1d-eef79d866ef5","createTime":"2025-07-12T19:56:29.695403Z","updateTime":"2025-07-12T19:56:29.695403Z","locationId":"nam5","type":"FIRESTORE_NATIVE","concurrencyMode":"PESSIMISTIC","versionRetentionPeriod":"3600s","earliestVersionTime":"2025-10-21T01:32:13.837486Z","appEngineIntegrationMode":"DISABLED","keyPrefix":"s","pointInTimeRecoveryEnablement":"POINT_IN_TIME_RECOVERY_DISABLED","deleteProtectionState":"DELETE_PROTECTION_DISABLED","databaseEdition":"STANDARD","freeTier":true,"realtimeUpdatesMode":"REALTIME_UPDATES_MODE_ENABLED","etag":"IOyQ4o+gtJADMIizs/+suY4D"}
[info] i  firestore: there are 27 indexes defined in your project that are not present in your firestore indexes file. To delete them, run this command with the --force flag. 
[debug] [2025-10-21T02:32:14.047Z] Skipping existing index: {"collectionGroup":"users","queryScope":"COLLECTION","fields":[{"fieldPath":"companyId","order":"ASCENDING"},{"fieldPath":"createdAt","order":"DESCENDING"},{"fieldPath":"__name__","order":"DESCENDING"}]}
[debug] [2025-10-21T02:32:14.048Z] Skipping existing index: {"collectionGroup":"users","queryScope":"COLLECTION","fields":[{"fieldPath":"companyId","order":"ASCENDING"},{"fieldPath":"fullName","order":"ASCENDING"},{"fieldPath":"__name__","order":"ASCENDING"}]}
[debug] [2025-10-21T02:32:14.048Z] Creating new index: {"collectionGroup":"users","queryScope":"COLLECTION","fields":[{"fieldPath":"companyId","order":"ASCENDING"},{"fieldPath":"roles","arrayConfig":"CONTAINS"},{"fieldPath":"__name__"}]}
[debug] [2025-10-21T02:32:14.048Z] Checked if tokens are valid: true, expires at: 1761017526347
[debug] [2025-10-21T02:32:14.048Z] Checked if tokens are valid: true, expires at: 1761017526347
[debug] [2025-10-21T02:32:14.048Z] >>> [apiv2][query] POST https://firestore.googleapis.com/v1/projects/peakflow-3a2ed/databases/(default)/collectionGroups/users/indexes [none]
[debug] [2025-10-21T02:32:14.048Z] >>> [apiv2][body] POST https://firestore.googleapis.com/v1/projects/peakflow-3a2ed/databases/(default)/collectionGroups/users/indexes {"fields":[{"fieldPath":"companyId","order":"ASCENDING"},{"fieldPath":"roles","arrayConfig":"CONTAINS"},{"fieldPath":"__name__"}],"queryScope":"COLLECTION"}
[debug] [2025-10-21T02:32:14.443Z] <<< [apiv2][status] POST https://firestore.googleapis.com/v1/projects/peakflow-3a2ed/databases/(default)/collectionGroups/users/indexes 400
[debug] [2025-10-21T02:32:14.443Z] <<< [apiv2][body] POST https://firestore.googleapis.com/v1/projects/peakflow-3a2ed/databases/(default)/collectionGroups/users/indexes {"error":{"code":400,"message":"No valid order or array config provided: field_path: \t \"__name__\"\n","status":"INVALID_ARGUMENT"}}
[error] 
[error] Error: Request to https://firestore.googleapis.com/v1/projects/peakflow-3a2ed/databases/(default)/collectionGroups/users/indexes had HTTP Error: 400, No valid order or array config provided: field_path: 	 "__name__"

[debug] [2025-10-21T02:32:15.309Z] Error Context: {
  "body": {
    "error": {
      "code": 400,
      "message": "No valid order or array config provided: field_path: \t \"__name__\"\n",
      "status": "INVALID_ARGUMENT"
    }
  },
  "response": {
    "statusCode": 400
  }
}
[debug] [2025-10-21T02:56:25.636Z] ----------------------------------------------------------------------
[debug] [2025-10-21T02:56:25.637Z] Command:       /home/dachu/.nvm/versions/node/v22.20.0/bin/node /home/dachu/.nvm/versions/node/v22.20.0/bin/firebase deploy --only firestore:rules --project peakflow-3a2ed
[debug] [2025-10-21T02:56:25.638Z] CLI Version:   14.20.0
[debug] [2025-10-21T02:56:25.638Z] Platform:      linux
[debug] [2025-10-21T02:56:25.638Z] Node Version:  v22.20.0
[debug] [2025-10-21T02:56:25.638Z] Time:          Tue Oct 21 2025 04:56:25 GMT+0200 (Central Africa Time)
[debug] [2025-10-21T02:56:25.638Z] ----------------------------------------------------------------------
[debug] 
[debug] [2025-10-21T02:56:25.765Z] > command requires scopes: ["email","openid","https://www.googleapis.com/auth/cloudplatformprojects.readonly","https://www.googleapis.com/auth/firebase","https://www.googleapis.com/auth/cloud-platform"]
[debug] [2025-10-21T02:56:25.766Z] > authorizing via signed-in user (brpotch@gmail.com)
[debug] [2025-10-21T02:56:25.766Z] [iam] checking project peakflow-3a2ed for permissions ["datastore.indexes.create","datastore.indexes.delete","datastore.indexes.list","datastore.indexes.update","firebase.projects.get"]
[debug] [2025-10-21T02:56:25.767Z] Checked if tokens are valid: true, expires at: 1761017526347
[debug] [2025-10-21T02:56:25.767Z] Checked if tokens are valid: true, expires at: 1761017526347
[debug] [2025-10-21T02:56:25.767Z] >>> [apiv2][query] POST https://cloudresourcemanager.googleapis.com/v1/projects/peakflow-3a2ed:testIamPermissions [none]
[debug] [2025-10-21T02:56:25.767Z] >>> [apiv2][(partial)header] POST https://cloudresourcemanager.googleapis.com/v1/projects/peakflow-3a2ed:testIamPermissions x-goog-quota-user=projects/peakflow-3a2ed
[debug] [2025-10-21T02:56:25.768Z] >>> [apiv2][body] POST https://cloudresourcemanager.googleapis.com/v1/projects/peakflow-3a2ed:testIamPermissions {"permissions":["datastore.indexes.create","datastore.indexes.delete","datastore.indexes.list","datastore.indexes.update","firebase.projects.get"]}
[debug] [2025-10-21T02:56:27.756Z] <<< [apiv2][status] POST https://cloudresourcemanager.googleapis.com/v1/projects/peakflow-3a2ed:testIamPermissions 200
[debug] [2025-10-21T02:56:27.756Z] <<< [apiv2][body] POST https://cloudresourcemanager.googleapis.com/v1/projects/peakflow-3a2ed:testIamPermissions {"permissions":["datastore.indexes.create","datastore.indexes.delete","datastore.indexes.list","datastore.indexes.update","firebase.projects.get"]}
[info] 
[info] === Deploying to 'peakflow-3a2ed'...
[info] 
[info] i  deploying firestore 
[info] i  firestore: ensuring required API firestore.googleapis.com is enabled... 
[info] i  firestore: ensuring required API firestore.googleapis.com is enabled... 
[debug] [2025-10-21T02:56:27.760Z] Checked if tokens are valid: true, expires at: 1761017526347
[debug] [2025-10-21T02:56:27.760Z] Checked if tokens are valid: true, expires at: 1761017526347
[debug] [2025-10-21T02:56:27.760Z] >>> [apiv2][query] GET https://firestore.googleapis.com/v1/projects/peakflow-3a2ed/databases/(default) [none]
[debug] [2025-10-21T02:56:29.599Z] <<< [apiv2][status] GET https://firestore.googleapis.com/v1/projects/peakflow-3a2ed/databases/(default) 200
[debug] [2025-10-21T02:56:29.599Z] <<< [apiv2][body] GET https://firestore.googleapis.com/v1/projects/peakflow-3a2ed/databases/(default) {"name":"projects/peakflow-3a2ed/databases/(default)","uid":"50985e32-a12a-4059-9b1d-eef79d866ef5","createTime":"2025-07-12T19:56:29.695403Z","updateTime":"2025-07-12T19:56:29.695403Z","locationId":"nam5","type":"FIRESTORE_NATIVE","concurrencyMode":"PESSIMISTIC","versionRetentionPeriod":"3600s","earliestVersionTime":"2025-10-21T01:56:29.460434Z","appEngineIntegrationMode":"DISABLED","keyPrefix":"s","pointInTimeRecoveryEnablement":"POINT_IN_TIME_RECOVERY_DISABLED","deleteProtectionState":"DELETE_PROTECTION_DISABLED","databaseEdition":"STANDARD","freeTier":true,"realtimeUpdatesMode":"REALTIME_UPDATES_MODE_ENABLED","etag":"IJ6r7sWltJADMIizs/+suY4D"}
[info] i  firestore: reading indexes from firestore.indexes.json... 
[info] i  cloud.firestore: checking firestore.rules for compilation errors... 
[debug] [2025-10-21T02:56:29.607Z] Checked if tokens are valid: true, expires at: 1761017526347
[debug] [2025-10-21T02:56:29.608Z] Checked if tokens are valid: true, expires at: 1761017526347
[debug] [2025-10-21T02:56:29.608Z] >>> [apiv2][query] POST https://firebaserules.googleapis.com/v1/projects/peakflow-3a2ed:test [none]
[debug] [2025-10-21T02:56:29.608Z] >>> [apiv2][body] POST https://firebaserules.googleapis.com/v1/projects/peakflow-3a2ed:test [omitted]
[debug] [2025-10-21T02:56:31.339Z] <<< [apiv2][status] POST https://firebaserules.googleapis.com/v1/projects/peakflow-3a2ed:test 200
[debug] [2025-10-21T02:56:31.340Z] <<< [apiv2][body] POST https://firebaserules.googleapis.com/v1/projects/peakflow-3a2ed:test {}
[info] ✔  cloud.firestore: rules file firestore.rules compiled successfully 
[debug] [2025-10-21T02:56:31.342Z] Checked if tokens are valid: true, expires at: 1761017526347
[debug] [2025-10-21T02:56:31.342Z] Checked if tokens are valid: true, expires at: 1761017526347
[debug] [2025-10-21T02:56:31.342Z] >>> [apiv2][query] GET https://firebaserules.googleapis.com/v1/projects/peakflow-3a2ed/releases pageSize=10&pageToken=
[debug] [2025-10-21T02:56:32.194Z] <<< [apiv2][status] GET https://firebaserules.googleapis.com/v1/projects/peakflow-3a2ed/releases 200
[debug] [2025-10-21T02:56:32.194Z] <<< [apiv2][body] GET https://firebaserules.googleapis.com/v1/projects/peakflow-3a2ed/releases {"releases":[{"name":"projects/peakflow-3a2ed/releases/cloud.firestore","rulesetName":"projects/peakflow-3a2ed/rulesets/b854b9de-422c-4e45-8dcf-69a319a09a4e","createTime":"2025-07-12T19:56:35.110176Z","updateTime":"2025-10-20T08:28:42.556439Z"},{"name":"projects/peakflow-3a2ed/releases/firebase.storage/peakflow-3a2ed.firebasestorage.app","rulesetName":"projects/peakflow-3a2ed/rulesets/75c36ecc-b00a-4519-8137-02a4de91b9d9","createTime":"2025-07-12T19:59:06.960661Z","updateTime":"2025-10-18T03:47:55.154044Z"}]}
[debug] [2025-10-21T02:56:32.225Z] Checked if tokens are valid: true, expires at: 1761017526347
[debug] [2025-10-21T02:56:32.225Z] Checked if tokens are valid: true, expires at: 1761017526347
[debug] [2025-10-21T02:56:32.226Z] >>> [apiv2][query] GET https://firebaserules.googleapis.com/v1/projects/peakflow-3a2ed/rulesets/b854b9de-422c-4e45-8dcf-69a319a09a4e [none]
[debug] [2025-10-21T02:56:33.103Z] <<< [apiv2][status] GET https://firebaserules.googleapis.com/v1/projects/peakflow-3a2ed/rulesets/b854b9de-422c-4e45-8dcf-69a319a09a4e 200
[debug] [2025-10-21T02:56:33.103Z] <<< [apiv2][body] GET https://firebaserules.googleapis.com/v1/projects/peakflow-3a2ed/rulesets/b854b9de-422c-4e45-8dcf-69a319a09a4e [omitted]
[info] i  firestore: uploading rules firestore.rules... 
[debug] [2025-10-21T02:56:33.105Z] Checked if tokens are valid: true, expires at: 1761017526347
[debug] [2025-10-21T02:56:33.105Z] Checked if tokens are valid: true, expires at: 1761017526347
[debug] [2025-10-21T02:56:33.106Z] >>> [apiv2][query] POST https://firebaserules.googleapis.com/v1/projects/peakflow-3a2ed/rulesets [none]
[debug] [2025-10-21T02:56:33.106Z] >>> [apiv2][body] POST https://firebaserules.googleapis.com/v1/projects/peakflow-3a2ed/rulesets [omitted]
[debug] [2025-10-21T02:56:34.125Z] <<< [apiv2][status] POST https://firebaserules.googleapis.com/v1/projects/peakflow-3a2ed/rulesets 200
[debug] [2025-10-21T02:56:34.126Z] <<< [apiv2][body] POST https://firebaserules.googleapis.com/v1/projects/peakflow-3a2ed/rulesets {"name":"projects/peakflow-3a2ed/rulesets/99dc90f0-1be2-48f5-afa3-7d7331de7b40","source":{"files":[{"content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    // Helper function to check if user is authenticated\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n    \n    // Helper function to check if user has a specific role\n    function hasRole(role) {\n      return isAuthenticated() && \n        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&\n        role in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles;\n    }\n    \n    // Helper function to check if user is admin\n    function isAdmin() {\n      return hasRole('admin');\n    }\n    \n    // Helper function to check if user is developer\n    function isDeveloper() {\n      return hasRole('developer');\n    }\n\n    // Helper function to check if user is super admin\n    function isSuperAdmin() {\n      return hasRole('super_admin');\n    }\n    \n    // Helper function to check if user can manage companies\n    function canManageCompanies() {\n      return isAdmin() || isDeveloper() || isSuperAdmin();\n    }\n    \n    // Users collection\n    match /users/{userId} {\n      // Users can read their own data\n      allow read: if isAuthenticated() && request.auth.uid == userId;\n      \n      // Users can update their own data (except roles and companyId)\n      allow update: if isAuthenticated() && \n        request.auth.uid == userId &&\n        (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['roles', 'companyId']));\n      \n      // Only admins can read all users\n      allow read: if isAdmin();\n      \n      // Only admins can create or delete users\n      allow create, delete: if isAdmin();\n      \n      // Only admins can update any user (including roles and companyId)\n      allow update: if isAdmin();\n      \n      // Allow user creation during signup\n      allow create: if isAuthenticated() && request.auth.uid == userId;\n    }\n    \n    // Companies collection\n    match /companies/{companyId} {\n      // All authenticated users can read companies\n      allow read: if isAuthenticated();\n\n      // Only admins and developers can create companies\n      allow create: if canManageCompanies();\n\n      // Users belonging to company can update config fields (currency, VAT)\n      // Only admins and developers can update other fields\n      allow update: if canManageCompanies() ||\n        (belongsToCompany(companyId) &&\n         request.resource.data.diff(resource.data).affectedKeys()\n           .hasOnly(['defaultCurrency', 'vatPercentage', 'updatedAt']));\n\n      // Only admins can delete companies\n      allow delete: if isAdmin();\n    }\n    \n    // Rate limits collection\n    match /rateLimits/{document} {\n      // Allow authenticated users to read/write their own rate limit entries\n      allow read, write: if isAuthenticated();\n    }\n    \n    // Password reset codes collection\n    match /passwordResetCodes/{document} {\n      // Allow authenticated users to read/write password reset codes\n      allow read, write: if isAuthenticated();\n    }\n    \n    // Activities collection for audit trail\n    match /activities/{activityId} {\n      // Allow authenticated users to read activities\n      allow read: if isAuthenticated();\n\n      // Only admins and developers can write activities\n      allow create: if canManageCompanies();\n\n      // Activities cannot be updated or deleted (audit trail integrity)\n      allow update, delete: if false;\n    }\n\n    // Bank statements collection\n    match /bank_statements/{statementId} {\n      // Users can read statements for their own company or companies they have access to\n      allow read: if isAuthenticated() && (\n        canManageCompanies() || // Admins/developers can access all\n        resource.data.userId == request.auth.uid || // Owner can access their uploads\n        (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&\n         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyId == resource.data.companyId)\n      );\n\n      // Users can create bank statements for their company\n      allow create: if isAuthenticated() && (\n        canManageCompanies() || // Admins/developers can create for any company\n        (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&\n         request.resource.data.userId == request.auth.uid)\n      );\n\n      // Users can update their own bank statements\n      allow update: if isAuthenticated() && (\n        canManageCompanies() || // Admins/developers can update any\n        resource.data.userId == request.auth.uid\n      );\n\n      // Users can delete their own bank statements or statements from their company\n      allow delete: if isAuthenticated() && (\n        canManageCompanies() || // Admins/developers can delete any\n        resource.data.userId == request.auth.uid || // Owner can delete their uploads\n        (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&\n         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyId == resource.data.companyId)\n      );\n    }\n\n    // Usage tracking collection\n    match /usage_tracking/{trackingId} {\n      // Users can read their own usage data\n      allow read: if isAuthenticated() && (\n        isAdmin() || // Admins can see all usage\n        resource.data.userId == request.auth.uid\n      );\n\n      // System can create usage tracking entries\n      allow create: if isAuthenticated();\n\n      // No updates or deletes allowed (audit trail)\n      allow update, delete: if false;\n    }\n\n    // PDF extractions collection (for compatibility with existing PDF extraction)\n    match /pdf_extractions/{extractionId} {\n      // Users can read their own extractions\n      allow read: if isAuthenticated() && (\n        isAdmin() || // Admins can see all\n        resource.data.userId == request.auth.uid\n      );\n\n      // Users can create extractions\n      allow create: if isAuthenticated();\n\n      // Users can update their own extractions\n      allow update: if isAuthenticated() && (\n        isAdmin() ||\n        resource.data.userId == request.auth.uid\n      );\n\n      // Only admins can delete extractions\n      allow delete: if isAdmin();\n    }\n\n    // Config collection (for API keys and system configuration)\n    match /config/{configId} {\n      // Only system/functions can read config (Firebase Functions have admin access)\n      // Regular users cannot access API keys and sensitive config\n      allow read, write: if false;\n    }\n\n        // Accounting charts (tenant-level metadata)\n    match /accounting_charts/{chartId} {\n      allow read: if canManageCompanies();\n      allow create, update, delete: if canManageCompanies();\n    }\n\n    // Chart of accounts entries (global collection with tenant field)\n    match /accounting_accounts/{accountId} {\n      allow read: if canManageCompanies();\n      allow create, update, delete: if canManageCompanies();\n    }\n\n    // Fiscal periods (global collection with tenant scoping)\n    match /fiscal_periods/{periodId} {\n      allow read: if isAuthenticated();\n      allow create, update, delete: if canManageCompanies();\n    }\n\n    // Posted journal entries (global collection with tenant scoping)\n    match /journal_entries/{entryId} {\n      allow read: if isAuthenticated() &&\n        resource.data.tenantId != null &&\n        belongsToCompany(resource.data.tenantId);\n      allow create, update: if isAuthenticated() &&\n        request.resource.data.tenantId != null &&\n        belongsToCompany(request.resource.data.tenantId);\n      allow delete: if canManageCompanies();  // TEMPORARY FOR TESTING - TODO: REVERT TO: if false\n    }\n\n    // General ledger entries (global collection with tenant scoping)\n    match /general_ledger/{entryId} {\n      allow read: if isAuthenticated() &&\n        resource.data.tenantId != null &&\n        belongsToCompany(resource.data.tenantId);\n      allow create: if isAuthenticated() &&\n        request.resource.data.tenantId != null &&\n        belongsToCompany(request.resource.data.tenantId);\n      allow update: if false;\n      allow delete: if canManageCompanies();  // TEMPORARY FOR TESTING - TODO: REVERT TO: if false\n    }\n\n    // Staging journal entries (global collection with tenant scoping)\n    match /staging_journal_entries/{entryId} {\n      allow read: if isAuthenticated() &&\n        resource.data.tenantId != null &&\n        belongsToCompany(resource.data.tenantId);\n      allow create, update: if isAuthenticated() &&\n        request.resource.data.tenantId != null &&\n        belongsToCompany(request.resource.data.tenantId);\n      allow delete: if canManageCompanies();\n    }\n\n    // Staging general ledger entries (global collection with tenant scoping)\n    match /staging_general_ledger/{entryId} {\n      allow read: if isAuthenticated() &&\n        resource.data.tenantId != null &&\n        belongsToCompany(resource.data.tenantId);\n      allow create, update: if isAuthenticated() &&\n        request.resource.data.tenantId != null &&\n        belongsToCompany(request.resource.data.tenantId);\n      allow delete: if canManageCompanies();\n    }\n\n// ====================================================================\n    // MULTI-TENANT COMPANY-SCOPED COLLECTIONS (CSC Pattern)\n    // ====================================================================\n\n    // Helper function to check if user belongs to a specific company\n    function belongsToCompany(companyId) {\n      return isAuthenticated() &&\n        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&\n        (\n          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyId == companyId ||\n          (\n            get(/databases/$(database)/documents/users/$(request.auth.uid)).data.accessibleCompanyIds != null &&\n            companyId in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.accessibleCompanyIds\n          )\n        );\n    }\n\n    // Helper function to check if user is admin of a specific company\n    function isCompanyAdmin(companyId) {\n      return belongsToCompany(companyId) && hasRole('admin');\n    }\n\n    // Company-scoped collections\n    match /companies/{companyId} {\n\n      // Bank accounts collection\n      match /bankAccounts/{bankAccountId} {\n        allow read: if belongsToCompany(companyId) || canManageCompanies();\n        allow create, update, delete: if canManageCompanies();\n      }\n\n      // Bank transfers collection\n      match /bankTransfers/{transferId} {\n        allow read: if belongsToCompany(companyId) || canManageCompanies();\n        allow create, update, delete: if canManageCompanies();\n      }\n\n      // Bank statements collection (company-scoped)\n      match /bankStatements/{statementId} {\n        allow read: if belongsToCompany(companyId) || canManageCompanies();\n        allow create: if belongsToCompany(companyId);\n        allow update: if belongsToCompany(companyId) || canManageCompanies();\n        allow delete: if belongsToCompany(companyId) || canManageCompanies();\n      }\n\n      // Ledger entries collection\n      match /ledgerEntries/{ledgerEntryId} {\n        allow read: if belongsToCompany(companyId) || canManageCompanies();\n        allow create, update: if belongsToCompany(companyId) || canManageCompanies();\n        allow delete: if false; // Ledger entries should never be deleted\n      }\n\n      // Journal entries collection\n      match /journalEntries/{journalId} {\n        allow read: if belongsToCompany(companyId) || canManageCompanies();\n        allow create, update: if belongsToCompany(companyId) || canManageCompanies();\n        allow delete: if false; // Journal entries should never be deleted\n      }\n\n      // Reconciliations collection with proper subcollections\n      match /reconciliations/{sessionId} {\n        allow read: if belongsToCompany(companyId) || canManageCompanies();\n        allow create: if belongsToCompany(companyId);\n        allow update: if belongsToCompany(companyId) || canManageCompanies();\n        allow delete: if canManageCompanies();\n\n        // Reconciliation matches subcollection\n        match /matches/{matchId} {\n          allow read: if belongsToCompany(companyId) || canManageCompanies();\n          allow create, update: if belongsToCompany(companyId) || canManageCompanies();\n          allow delete: if belongsToCompany(companyId) || canManageCompanies();\n        }\n\n        // Reconciliation adjustments subcollection\n        match /adjustments/{adjustmentId} {\n          allow read: if belongsToCompany(companyId) || canManageCompanies();\n          allow create, update: if belongsToCompany(companyId) || canManageCompanies();\n          allow delete: if canManageCompanies();\n        }\n      }\n\n      // Debtors collection - scoped to company\n      match /debtors/{debtorId} {\n        // Users can only read debtors from their own company\n        allow read: if belongsToCompany(companyId) || canManageCompanies();\n\n        // Users can create debtors for their own company\n        allow create: if belongsToCompany(companyId) &&\n          request.resource.data.companyId == companyId &&\n          request.resource.data.createdBy == request.auth.uid;\n\n        // Users can update debtors in their company (but not change companyId)\n        allow update: if belongsToCompany(companyId) &&\n          resource.data.companyId == companyId &&\n          (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['companyId', 'id', 'createdAt', 'createdBy']));\n\n        // Only company admins can delete debtors\n        allow delete: if isCompanyAdmin(companyId);\n      }\n\n      // Creditors collection - scoped to company\n      match /creditors/{creditorId} {\n        // Users can only read creditors from their own company\n        allow read: if belongsToCompany(companyId) || canManageCompanies();\n\n        // Users can create creditors for their own company\n        allow create: if belongsToCompany(companyId) &&\n          request.resource.data.companyId == companyId &&\n          request.resource.data.createdBy == request.auth.uid;\n\n        // Users can update creditors in their company (but not change companyId)\n        allow update: if belongsToCompany(companyId) &&\n          resource.data.companyId == companyId &&\n          (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['companyId', 'id', 'createdAt', 'createdBy']));\n\n        // Only company admins can delete creditors\n        allow delete: if isCompanyAdmin(companyId);\n      }\n\n      // Pending Payments collection - AI-matched payments awaiting allocation\n      match /pendingPayments/{paymentId} {\n        // Users can read pending payments from their own company\n        allow read: if belongsToCompany(companyId) || canManageCompanies();\n\n        // Users can create pending payments for their own company\n        allow create: if belongsToCompany(companyId) &&\n          request.resource.data.companyId == companyId &&\n          request.resource.data.createdBy == request.auth.uid;\n\n        // Users can update pending payments (allocations, status) but not core fields\n        allow update: if belongsToCompany(companyId) &&\n          resource.data.companyId == companyId &&\n          (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['companyId', 'id', 'createdAt', 'createdBy', 'amount', 'entityId', 'entityType', 'transactionDate']));\n\n        // Only company admins can delete pending payments\n        allow delete: if isCompanyAdmin(companyId) || canManageCompanies();\n      }\n\n      // Payments collection (customer receipts)\n      match /payments/{paymentId} {\n        // Users can read payments for their own company\n        allow read: if belongsToCompany(companyId) || canManageCompanies();\n\n        // Users can create payments for their company\n        allow create: if (belongsToCompany(companyId) || canManageCompanies()) &&\n          request.resource.data.companyId == companyId;\n\n        // Users can update payments in their company (e.g., allocation, status)\n        allow update: if (belongsToCompany(companyId) || canManageCompanies()) &&\n          resource.data.companyId == companyId &&\n          (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['companyId']));\n\n        // Only company admins or platform admins can delete payments\n        allow delete: if isCompanyAdmin(companyId) || canManageCompanies();\n      }\n\n      // Statements collection (customer & supplier statements)\n      match /statements/{statementId} {\n        // Members of the company (or admins/developers) can read statements\n        allow read: if belongsToCompany(companyId) || canManageCompanies();\n\n        // Members can generate statements for their company\n        allow create: if (belongsToCompany(companyId) || canManageCompanies()) &&\n          request.resource.data.companyId == companyId;\n\n        // Members can update statements for their company (e.g., change status),\n        // but the statement must stay scoped to the same company.\n        allow update: if (belongsToCompany(companyId) || canManageCompanies()) &&\n          resource.data.companyId == companyId &&\n          (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['companyId']));\n\n        // Only company admins or platform admins/developers can delete statements\n        allow delete: if isCompanyAdmin(companyId) || canManageCompanies();\n      }\n\n      // Transactions collection - scoped to company\n      match /transactions/{transactionId} {\n        // Users can only read transactions from their own company\n        allow read: if belongsToCompany(companyId);\n\n        // Users can create transactions for their own company\n        allow create: if belongsToCompany(companyId) &&\n          request.resource.data.companyId == companyId &&\n          request.resource.data.createdBy == request.auth.uid;\n\n        // Users can update transactions (status, dates) but not core fields\n        allow update: if belongsToCompany(companyId) &&\n          resource.data.companyId == companyId &&\n          (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['companyId', 'id', 'createdAt', 'createdBy', 'amount', 'entityId', 'entityType']));\n\n        // Only company admins can delete transactions\n        allow delete: if isCompanyAdmin(companyId);\n      }\n\n      // Cash flow forecasts collection\n      match /cashFlowForecasts/{forecastId} {\n        allow read: if belongsToCompany(companyId) || canManageCompanies();\n        allow create, update: if belongsToCompany(companyId) || canManageCompanies();\n        allow delete: if canManageCompanies();\n      }\n\n      // Chart of accounts for company\n      match /chartOfAccounts/{accountId} {\n        allow read: if belongsToCompany(companyId) || canManageCompanies();\n        allow create, update, delete: if canManageCompanies();\n      }\n\n      // GL Mapping Rules for bank-to-ledger import\n      match /glMappingRules/{ruleId} {\n        allow read: if belongsToCompany(companyId) || canManageCompanies();\n        allow create, update, delete: if canManageCompanies();\n      }\n\n      // Bank Import Sessions for tracking statement imports\n      match /bankImportSessions/{sessionId} {\n        allow read: if belongsToCompany(companyId) || canManageCompanies();\n        allow create: if belongsToCompany(companyId);\n        allow update: if belongsToCompany(companyId) || canManageCompanies();\n        allow delete: if canManageCompanies();\n      }\n\n      // Configuration subcollection (industry settings, feature flags, etc.)\n      match /configuration/{configDoc} {\n        allow read: if belongsToCompany(companyId) || canManageCompanies();\n        allow create, update, delete: if canManageCompanies();\n      }\n\n      // Service Level Agreements (SLAs) collection - named serviceAgreements in the code\n      match /serviceAgreements/{slaId} {\n        // Users can read SLAs from their own company\n        allow read: if belongsToCompany(companyId) || canManageCompanies();\n\n        // Users can create SLAs for their own company\n        allow create: if belongsToCompany(companyId) &&\n          request.resource.data.companyId == companyId;\n\n        // Users can update SLAs in their company\n        allow update: if belongsToCompany(companyId) &&\n          resource.data.companyId == companyId;\n\n        // Only company admins can delete SLAs\n        allow delete: if isCompanyAdmin(companyId) || canManageCompanies();\n\n        // SLA line items subcollection\n        match /lineItems/{lineItemId} {\n          allow read: if belongsToCompany(companyId) || canManageCompanies();\n          allow create, update: if belongsToCompany(companyId) || canManageCompanies();\n          allow delete: if isCompanyAdmin(companyId) || canManageCompanies();\n        }\n\n        // SLA history/audit subcollection\n        match /history/{historyId} {\n          allow read: if belongsToCompany(companyId) || canManageCompanies();\n          allow create: if belongsToCompany(companyId) || canManageCompanies();\n          allow update, delete: if false; // History should be immutable\n        }\n      }\n\n      // Invoices collection (for SLA-generated and ad-hoc invoices)\n      match /invoices/{invoiceId} {\n        // Users can read invoices from their own company\n        allow read: if belongsToCompany(companyId) || canManageCompanies();\n\n        // Users can create invoices for their own company\n        allow create: if belongsToCompany(companyId) &&\n          request.resource.data.companyId == companyId;\n\n        // Users can update invoices (e.g., status, payment info)\n        allow update: if belongsToCompany(companyId) &&\n          resource.data.companyId == companyId;\n\n        // Only company admins can delete invoices\n        allow delete: if isCompanyAdmin(companyId) || canManageCompanies();\n\n        // Invoice line items subcollection\n        match /lineItems/{lineItemId} {\n          allow read: if belongsToCompany(companyId) || canManageCompanies();\n          allow create, update: if belongsToCompany(companyId) || canManageCompanies();\n          allow delete: if isCompanyAdmin(companyId) || canManageCompanies();\n        }\n\n        // Invoice payments subcollection\n        match /payments/{paymentId} {\n          allow read: if belongsToCompany(companyId) || canManageCompanies();\n          allow create: if belongsToCompany(companyId) || canManageCompanies();\n          allow update: if belongsToCompany(companyId) || canManageCompanies();\n          allow delete: if false; // Payments should not be deleted\n        }\n      }\n\n      // Quotes collection\n      match /quotes/{quoteId} {\n        // Users can read quotes from their own company\n        allow read: if belongsToCompany(companyId) || canManageCompanies();\n\n        // Users can create quotes for any company (workspace access checked in app)\n        allow create: if isAuthenticated() &&\n          request.resource.data.companyId == companyId;\n\n        // Users can update quotes in their company\n        allow update: if belongsToCompany(companyId) &&\n          resource.data.companyId == companyId;\n\n        // Only company admins can delete quotes\n        allow delete: if isCompanyAdmin(companyId) || canManageCompanies();\n      }\n\n      // Credit notes collection\n      match /creditNotes/{creditNoteId} {\n        // Users can read credit notes for their own company\n        allow read: if belongsToCompany(companyId) || canManageCompanies();\n\n        // Users can create credit notes for their company\n        allow create: if (belongsToCompany(companyId) || canManageCompanies()) &&\n          request.resource.data.companyId == companyId;\n\n        // Users can update credit notes in their company (e.g., allocations, status)\n        allow update: if (belongsToCompany(companyId) || canManageCompanies()) &&\n          resource.data.companyId == companyId &&\n          (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['companyId']));\n\n        // Only company admins or platform admins can delete credit notes\n        allow delete: if isCompanyAdmin(companyId) || canManageCompanies();\n      }\n\n      // Sales orders collection\n      match /salesOrders/{salesOrderId} {\n        // Users can read sales orders from their own company\n        allow read: if belongsToCompany(companyId) || canManageCompanies();\n\n        // Users can create sales orders for their own company\n        allow create: if belongsToCompany(companyId) &&\n          request.resource.data.companyId == companyId;\n\n        // Users can update sales orders\n        allow update: if belongsToCompany(companyId) &&\n          resource.data.companyId == companyId;\n\n        // Only company admins can delete sales orders\n        allow delete: if isCompanyAdmin(companyId) || canManageCompanies();\n      }\n\n      // ====================================================================\n      // ACCOUNTS PAYABLE COLLECTIONS (Phase 2)\n      // ====================================================================\n\n      // Purchase Orders collection\n      match /purchaseOrders/{poId} {\n        // Read: Anyone in company\n        allow read: if belongsToCompany(companyId) || canManageCompanies();\n\n        // Create: Anyone in company\n        allow create: if belongsToCompany(companyId) &&\n          request.resource.data.companyId == companyId;\n\n        // Update: Creator (draft), admin/financial_admin (any status)\n        allow update: if belongsToCompany(companyId) &&\n                         (resource.data.createdBy == request.auth.uid ||\n                          hasRole('admin') ||\n                          hasRole('financial_admin')) ||\n                         canManageCompanies();\n\n        // Delete: Admin only, draft only\n        allow delete: if (belongsToCompany(companyId) &&\n                          hasRole('admin') &&\n                          resource.data.status == 'draft') ||\n                         canManageCompanies();\n      }\n\n      // Vendor Bills collection\n      match /vendorBills/{billId} {\n        // Read: Anyone in company\n        allow read: if belongsToCompany(companyId) || canManageCompanies();\n\n        // Create: Anyone in company\n        allow create: if belongsToCompany(companyId) &&\n          request.resource.data.companyId == companyId;\n\n        // Update: Draft/pending can be updated by creator or admin/financial_admin\n        //         Posted bills are immutable (except by super admin for corrections)\n        allow update: if (belongsToCompany(companyId) &&\n                          ((resource.data.status == 'draft' || resource.data.status == 'pending_approval') ||\n                           hasRole('admin') ||\n                           hasRole('financial_admin'))) ||\n                         canManageCompanies();\n\n        // Delete: Admin only, draft only\n        allow delete: if (belongsToCompany(companyId) &&\n                          hasRole('admin') &&\n                          resource.data.status == 'draft') ||\n                         canManageCompanies();\n      }\n\n      // Vendor Payments collection (AP payments to suppliers)\n      match /vendorPayments/{paymentId} {\n        // Read: Anyone in company\n        allow read: if belongsToCompany(companyId) || canManageCompanies();\n\n        // Create: Anyone in company\n        allow create: if belongsToCompany(companyId) &&\n          request.resource.data.companyId == companyId;\n\n        // Update: Draft/pending by creator or admin/financial_admin\n        //         Processed payments can only be voided by admin\n        allow update: if (belongsToCompany(companyId) &&\n                          ((resource.data.status == 'draft' || resource.data.status == 'pending_approval') ||\n                           hasRole('admin'))) ||\n                         canManageCompanies();\n\n        // Delete: Admin only, draft only\n        allow delete: if (belongsToCompany(companyId) &&\n                          hasRole('admin') &&\n                          resource.data.status == 'draft') ||\n                         canManageCompanies();\n      }\n\n      // Payment Runs collection (batch payment processing)\n      match /paymentRuns/{runId} {\n        // Read: Anyone in company\n        allow read: if belongsToCompany(companyId) || canManageCompanies();\n\n        // Create/Update: Only admin\n        allow create, update: if (belongsToCompany(companyId) && hasRole('admin')) ||\n                                 canManageCompanies();\n\n        // Delete: Admin only, draft only\n        allow delete: if (belongsToCompany(companyId) &&\n                          hasRole('admin') &&\n                          resource.data.status == 'draft') ||\n                         canManageCompanies();\n      }\n\n      // Company audit logs - read-only for users\n      match /auditLogs/{logId} {\n        // Only company admins can read audit logs\n        allow read: if isCompanyAdmin(companyId);\n\n        // System-only writes (through Cloud Functions)\n        allow write: if false;\n      }\n    }\n  }\n}\n","name":"firestore.rules"}]},"createTime":"2025-10-21T02:56:33.895119Z","metadata":{"services":["cloud.firestore"]}}
[debug] [2025-10-21T02:56:34.126Z] [rules] created ruleset projects/peakflow-3a2ed/rulesets/99dc90f0-1be2-48f5-afa3-7d7331de7b40
[debug] [2025-10-21T02:56:34.127Z] [rules] releasing cloud.firestore/(default) with ruleset projects/peakflow-3a2ed/rulesets/99dc90f0-1be2-48f5-afa3-7d7331de7b40
[debug] [2025-10-21T02:56:34.127Z] Checked if tokens are valid: true, expires at: 1761017526347
[debug] [2025-10-21T02:56:34.127Z] Checked if tokens are valid: true, expires at: 1761017526347
[debug] [2025-10-21T02:56:34.127Z] >>> [apiv2][query] PATCH https://firebaserules.googleapis.com/v1/projects/peakflow-3a2ed/releases/cloud.firestore/(default) [none]
[debug] [2025-10-21T02:56:34.127Z] >>> [apiv2][body] PATCH https://firebaserules.googleapis.com/v1/projects/peakflow-3a2ed/releases/cloud.firestore/(default) {"release":{"name":"projects/peakflow-3a2ed/releases/cloud.firestore/(default)","rulesetName":"projects/peakflow-3a2ed/rulesets/99dc90f0-1be2-48f5-afa3-7d7331de7b40"}}
[debug] [2025-10-21T02:56:35.453Z] <<< [apiv2][status] PATCH https://firebaserules.googleapis.com/v1/projects/peakflow-3a2ed/releases/cloud.firestore/(default) 200
[debug] [2025-10-21T02:56:35.454Z] <<< [apiv2][body] PATCH https://firebaserules.googleapis.com/v1/projects/peakflow-3a2ed/releases/cloud.firestore/(default) {"name":"projects/peakflow-3a2ed/releases/cloud.firestore","rulesetName":"projects/peakflow-3a2ed/rulesets/99dc90f0-1be2-48f5-afa3-7d7331de7b40","createTime":"2025-07-12T19:56:35.110176Z","updateTime":"2025-10-21T02:56:35.257469Z"}
[debug] [2025-10-21T02:56:35.454Z] [rules] updated release projects/peakflow-3a2ed/releases/cloud.firestore
[info] ✔  firestore: released rules firestore.rules to cloud.firestore 
[info] 
[info] ✔  Deploy complete! 
[info] 
[info] Project Console: https://console.firebase.google.com/project/peakflow-3a2ed/overview
[debug] [2025-10-21T06:24:16.686Z] ----------------------------------------------------------------------
[debug] [2025-10-21T06:24:16.688Z] Command:       /home/dachu/.nvm/versions/node/v22.20.0/bin/node /home/dachu/.nvm/versions/node/v22.20.0/bin/firebase deploy --only firestore:rules
[debug] [2025-10-21T06:24:16.688Z] CLI Version:   14.20.0
[debug] [2025-10-21T06:24:16.688Z] Platform:      linux
[debug] [2025-10-21T06:24:16.688Z] Node Version:  v22.20.0
[debug] [2025-10-21T06:24:16.688Z] Time:          Tue Oct 21 2025 08:24:16 GMT+0200 (Central Africa Time)
[debug] [2025-10-21T06:24:16.688Z] ----------------------------------------------------------------------
[debug] 
[debug] [2025-10-21T06:24:16.818Z] > command requires scopes: ["email","openid","https://www.googleapis.com/auth/cloudplatformprojects.readonly","https://www.googleapis.com/auth/firebase","https://www.googleapis.com/auth/cloud-platform"]
[debug] [2025-10-21T06:24:16.819Z] > authorizing via signed-in user (brpotch@gmail.com)
[debug] [2025-10-21T06:24:16.819Z] [iam] checking project peakflow-3a2ed for permissions ["datastore.indexes.create","datastore.indexes.delete","datastore.indexes.list","datastore.indexes.update","firebase.projects.get"]
[debug] [2025-10-21T06:24:16.819Z] Checked if tokens are valid: false, expires at: 1761026943497
[debug] [2025-10-21T06:24:16.820Z] Checked if tokens are valid: false, expires at: 1761026943497
[debug] [2025-10-21T06:24:16.820Z] > refreshing access token with scopes: []
[debug] [2025-10-21T06:24:16.821Z] >>> [apiv2][query] POST https://www.googleapis.com/oauth2/v3/token [none]
[debug] [2025-10-21T06:24:16.821Z] >>> [apiv2][body] POST https://www.googleapis.com/oauth2/v3/token [omitted]
[debug] [2025-10-21T06:24:17.498Z] <<< [apiv2][status] POST https://www.googleapis.com/oauth2/v3/token 200
[debug] [2025-10-21T06:24:17.499Z] <<< [apiv2][body] POST https://www.googleapis.com/oauth2/v3/token [omitted]
[debug] [2025-10-21T06:24:17.516Z] >>> [apiv2][query] POST https://cloudresourcemanager.googleapis.com/v1/projects/peakflow-3a2ed:testIamPermissions [none]
[debug] [2025-10-21T06:24:17.516Z] >>> [apiv2][(partial)header] POST https://cloudresourcemanager.googleapis.com/v1/projects/peakflow-3a2ed:testIamPermissions x-goog-quota-user=projects/peakflow-3a2ed
[debug] [2025-10-21T06:24:17.516Z] >>> [apiv2][body] POST https://cloudresourcemanager.googleapis.com/v1/projects/peakflow-3a2ed:testIamPermissions {"permissions":["datastore.indexes.create","datastore.indexes.delete","datastore.indexes.list","datastore.indexes.update","firebase.projects.get"]}
[debug] [2025-10-21T06:24:19.648Z] <<< [apiv2][status] POST https://cloudresourcemanager.googleapis.com/v1/projects/peakflow-3a2ed:testIamPermissions 200
[debug] [2025-10-21T06:24:19.648Z] <<< [apiv2][body] POST https://cloudresourcemanager.googleapis.com/v1/projects/peakflow-3a2ed:testIamPermissions {"permissions":["datastore.indexes.create","datastore.indexes.delete","datastore.indexes.list","datastore.indexes.update","firebase.projects.get"]}
[info] 
[info] === Deploying to 'peakflow-3a2ed'...
[info] 
[info] i  deploying firestore 
[info] i  firestore: ensuring required API firestore.googleapis.com is enabled... 
[info] i  firestore: ensuring required API firestore.googleapis.com is enabled... 
[debug] [2025-10-21T06:24:19.654Z] Checked if tokens are valid: true, expires at: 1761031456500
[debug] [2025-10-21T06:24:19.654Z] Checked if tokens are valid: true, expires at: 1761031456500
[debug] [2025-10-21T06:24:19.655Z] >>> [apiv2][query] GET https://firestore.googleapis.com/v1/projects/peakflow-3a2ed/databases/(default) [none]
[debug] [2025-10-21T06:24:21.676Z] <<< [apiv2][status] GET https://firestore.googleapis.com/v1/projects/peakflow-3a2ed/databases/(default) 200
[debug] [2025-10-21T06:24:21.676Z] <<< [apiv2][body] GET https://firestore.googleapis.com/v1/projects/peakflow-3a2ed/databases/(default) {"name":"projects/peakflow-3a2ed/databases/(default)","uid":"50985e32-a12a-4059-9b1d-eef79d866ef5","createTime":"2025-07-12T19:56:29.695403Z","updateTime":"2025-07-12T19:56:29.695403Z","locationId":"nam5","type":"FIRESTORE_NATIVE","concurrencyMode":"PESSIMISTIC","versionRetentionPeriod":"3600s","earliestVersionTime":"2025-10-21T05:24:21.453668Z","appEngineIntegrationMode":"DISABLED","keyPrefix":"s","pointInTimeRecoveryEnablement":"POINT_IN_TIME_RECOVERY_DISABLED","deleteProtectionState":"DELETE_PROTECTION_DISABLED","databaseEdition":"STANDARD","freeTier":true,"realtimeUpdatesMode":"REALTIME_UPDATES_MODE_ENABLED","etag":"IOax/IDUtJADMIizs/+suY4D"}
[info] i  firestore: reading indexes from firestore.indexes.json... 
[info] i  cloud.firestore: checking firestore.rules for compilation errors... 
[debug] [2025-10-21T06:24:21.682Z] Checked if tokens are valid: true, expires at: 1761031456500
[debug] [2025-10-21T06:24:21.683Z] Checked if tokens are valid: true, expires at: 1761031456500
[debug] [2025-10-21T06:24:21.683Z] >>> [apiv2][query] POST https://firebaserules.googleapis.com/v1/projects/peakflow-3a2ed:test [none]
[debug] [2025-10-21T06:24:21.683Z] >>> [apiv2][body] POST https://firebaserules.googleapis.com/v1/projects/peakflow-3a2ed:test [omitted]
[debug] [2025-10-21T06:24:23.528Z] <<< [apiv2][status] POST https://firebaserules.googleapis.com/v1/projects/peakflow-3a2ed:test 200
[debug] [2025-10-21T06:24:23.528Z] <<< [apiv2][body] POST https://firebaserules.googleapis.com/v1/projects/peakflow-3a2ed:test {}
[info] ✔  cloud.firestore: rules file firestore.rules compiled successfully 
[debug] [2025-10-21T06:24:23.530Z] Checked if tokens are valid: true, expires at: 1761031456500
[debug] [2025-10-21T06:24:23.530Z] Checked if tokens are valid: true, expires at: 1761031456500
[debug] [2025-10-21T06:24:23.531Z] >>> [apiv2][query] GET https://firebaserules.googleapis.com/v1/projects/peakflow-3a2ed/releases pageSize=10&pageToken=
[debug] [2025-10-21T06:24:24.451Z] <<< [apiv2][status] GET https://firebaserules.googleapis.com/v1/projects/peakflow-3a2ed/releases 200
[debug] [2025-10-21T06:24:24.451Z] <<< [apiv2][body] GET https://firebaserules.googleapis.com/v1/projects/peakflow-3a2ed/releases {"releases":[{"name":"projects/peakflow-3a2ed/releases/cloud.firestore","rulesetName":"projects/peakflow-3a2ed/rulesets/99dc90f0-1be2-48f5-afa3-7d7331de7b40","createTime":"2025-07-12T19:56:35.110176Z","updateTime":"2025-10-21T02:56:35.257469Z"},{"name":"projects/peakflow-3a2ed/releases/firebase.storage/peakflow-3a2ed.firebasestorage.app","rulesetName":"projects/peakflow-3a2ed/rulesets/75c36ecc-b00a-4519-8137-02a4de91b9d9","createTime":"2025-07-12T19:59:06.960661Z","updateTime":"2025-10-18T03:47:55.154044Z"}]}
[debug] [2025-10-21T06:24:24.464Z] Checked if tokens are valid: true, expires at: 1761031456500
[debug] [2025-10-21T06:24:24.464Z] Checked if tokens are valid: true, expires at: 1761031456500
[debug] [2025-10-21T06:24:24.464Z] >>> [apiv2][query] GET https://firebaserules.googleapis.com/v1/projects/peakflow-3a2ed/rulesets/99dc90f0-1be2-48f5-afa3-7d7331de7b40 [none]
[debug] [2025-10-21T06:24:25.373Z] <<< [apiv2][status] GET https://firebaserules.googleapis.com/v1/projects/peakflow-3a2ed/rulesets/99dc90f0-1be2-48f5-afa3-7d7331de7b40 200
[debug] [2025-10-21T06:24:25.373Z] <<< [apiv2][body] GET https://firebaserules.googleapis.com/v1/projects/peakflow-3a2ed/rulesets/99dc90f0-1be2-48f5-afa3-7d7331de7b40 [omitted]
[info] i  firestore: uploading rules firestore.rules... 
[debug] [2025-10-21T06:24:25.375Z] Checked if tokens are valid: true, expires at: 1761031456500
[debug] [2025-10-21T06:24:25.375Z] Checked if tokens are valid: true, expires at: 1761031456500
[debug] [2025-10-21T06:24:25.375Z] >>> [apiv2][query] POST https://firebaserules.googleapis.com/v1/projects/peakflow-3a2ed/rulesets [none]
[debug] [2025-10-21T06:24:25.375Z] >>> [apiv2][body] POST https://firebaserules.googleapis.com/v1/projects/peakflow-3a2ed/rulesets [omitted]
[debug] [2025-10-21T06:24:26.706Z] <<< [apiv2][status] POST https://firebaserules.googleapis.com/v1/projects/peakflow-3a2ed/rulesets 200
[debug] [2025-10-21T06:24:26.707Z] <<< [apiv2][body] POST https://firebaserules.googleapis.com/v1/projects/peakflow-3a2ed/rulesets {"name":"projects/peakflow-3a2ed/rulesets/2c5a7ca4-007f-473b-b230-8b06a1b57a75","source":{"files":[{"content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    // Helper function to check if user is authenticated\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n    \n    // Helper function to check if user has a specific role\n    function hasRole(role) {\n      return isAuthenticated() && \n        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&\n        role in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles;\n    }\n    \n    // Helper function to check if user is admin\n    function isAdmin() {\n      return hasRole('admin');\n    }\n    \n    // Helper function to check if user is developer\n    function isDeveloper() {\n      return hasRole('developer');\n    }\n\n    // Helper function to check if user is super admin\n    function isSuperAdmin() {\n      return hasRole('super_admin');\n    }\n    \n    // Helper function to check if user can manage companies\n    function canManageCompanies() {\n      return isAdmin() || isDeveloper() || isSuperAdmin();\n    }\n    \n    // Users collection\n    match /users/{userId} {\n      // Users can read their own data\n      allow read: if isAuthenticated() && request.auth.uid == userId;\n      \n      // Users can update their own data (except roles and companyId)\n      allow update: if isAuthenticated() && \n        request.auth.uid == userId &&\n        (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['roles', 'companyId']));\n      \n      // Only admins can read all users\n      allow read: if isAdmin();\n      \n      // Only admins can create or delete users\n      allow create, delete: if isAdmin();\n      \n      // Only admins can update any user (including roles and companyId)\n      allow update: if isAdmin();\n      \n      // Allow user creation during signup\n      allow create: if isAuthenticated() && request.auth.uid == userId;\n    }\n    \n    // Companies collection\n    match /companies/{companyId} {\n      // All authenticated users can read companies\n      allow read: if isAuthenticated();\n\n      // Only admins and developers can create companies\n      allow create: if canManageCompanies();\n\n      // Users belonging to company can update config fields (currency, VAT)\n      // Only admins and developers can update other fields\n      allow update: if canManageCompanies() ||\n        (belongsToCompany(companyId) &&\n         request.resource.data.diff(resource.data).affectedKeys()\n           .hasOnly(['defaultCurrency', 'vatPercentage', 'updatedAt']));\n\n      // Only admins can delete companies\n      allow delete: if isAdmin();\n    }\n    \n    // Rate limits collection\n    match /rateLimits/{document} {\n      // Allow authenticated users to read/write their own rate limit entries\n      allow read, write: if isAuthenticated();\n    }\n    \n    // Password reset codes collection\n    match /passwordResetCodes/{document} {\n      // Allow authenticated users to read/write password reset codes\n      allow read, write: if isAuthenticated();\n    }\n    \n    // Activities collection for audit trail\n    match /activities/{activityId} {\n      // Allow authenticated users to read activities\n      allow read: if isAuthenticated();\n\n      // Only admins and developers can write activities\n      allow create: if canManageCompanies();\n\n      // Activities cannot be updated or deleted (audit trail integrity)\n      allow update, delete: if false;\n    }\n\n    // Bank statements collection\n    match /bank_statements/{statementId} {\n      // Users can read statements for their own company or companies they have access to\n      allow read: if isAuthenticated() && (\n        canManageCompanies() || // Admins/developers can access all\n        resource.data.userId == request.auth.uid || // Owner can access their uploads\n        (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&\n         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyId == resource.data.companyId)\n      );\n\n      // Users can create bank statements for their company\n      allow create: if isAuthenticated() && (\n        canManageCompanies() || // Admins/developers can create for any company\n        (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&\n         request.resource.data.userId == request.auth.uid)\n      );\n\n      // Users can update their own bank statements\n      allow update: if isAuthenticated() && (\n        canManageCompanies() || // Admins/developers can update any\n        resource.data.userId == request.auth.uid\n      );\n\n      // Users can delete their own bank statements or statements from their company\n      allow delete: if isAuthenticated() && (\n        canManageCompanies() || // Admins/developers can delete any\n        resource.data.userId == request.auth.uid || // Owner can delete their uploads\n        (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&\n         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyId == resource.data.companyId)\n      );\n    }\n\n    // Usage tracking collection\n    match /usage_tracking/{trackingId} {\n      // Users can read their own usage data\n      allow read: if isAuthenticated() && (\n        isAdmin() || // Admins can see all usage\n        resource.data.userId == request.auth.uid\n      );\n\n      // System can create usage tracking entries\n      allow create: if isAuthenticated();\n\n      // No updates or deletes allowed (audit trail)\n      allow update, delete: if false;\n    }\n\n    // PDF extractions collection (for compatibility with existing PDF extraction)\n    match /pdf_extractions/{extractionId} {\n      // Users can read their own extractions\n      allow read: if isAuthenticated() && (\n        isAdmin() || // Admins can see all\n        resource.data.userId == request.auth.uid\n      );\n\n      // Users can create extractions\n      allow create: if isAuthenticated();\n\n      // Users can update their own extractions\n      allow update: if isAuthenticated() && (\n        isAdmin() ||\n        resource.data.userId == request.auth.uid\n      );\n\n      // Only admins can delete extractions\n      allow delete: if isAdmin();\n    }\n\n    // Config collection (for API keys and system configuration)\n    match /config/{configId} {\n      // Only system/functions can read config (Firebase Functions have admin access)\n      // Regular users cannot access API keys and sensitive config\n      allow read, write: if false;\n    }\n\n        // Accounting charts (tenant-level metadata)\n    match /accounting_charts/{chartId} {\n      allow read: if canManageCompanies();\n      allow create, update, delete: if canManageCompanies();\n    }\n\n    // Chart of accounts entries (global collection with tenant field)\n    match /accounting_accounts/{accountId} {\n      allow read: if canManageCompanies();\n      allow create, update, delete: if canManageCompanies();\n    }\n\n    // Fiscal periods (global collection with tenant scoping)\n    match /fiscal_periods/{periodId} {\n      allow read: if isAuthenticated();\n      allow create, update, delete: if canManageCompanies();\n    }\n\n    // Posted journal entries (global collection with tenant scoping)\n    match /journal_entries/{entryId} {\n      allow read: if isAuthenticated() &&\n        resource.data.tenantId != null &&\n        belongsToCompany(resource.data.tenantId);\n      allow create, update: if isAuthenticated() &&\n        request.resource.data.tenantId != null &&\n        belongsToCompany(request.resource.data.tenantId);\n      allow delete: if canManageCompanies();  // TEMPORARY FOR TESTING - TODO: REVERT TO: if false\n    }\n\n    // General ledger entries (global collection with tenant scoping)\n    match /general_ledger/{entryId} {\n      allow read: if isAuthenticated() &&\n        resource.data.tenantId != null &&\n        belongsToCompany(resource.data.tenantId);\n      allow create: if isAuthenticated() &&\n        request.resource.data.tenantId != null &&\n        belongsToCompany(request.resource.data.tenantId);\n      allow update: if false;\n      allow delete: if canManageCompanies();  // TEMPORARY FOR TESTING - TODO: REVERT TO: if false\n    }\n\n    // Staging journal entries (global collection with tenant scoping)\n    match /staging_journal_entries/{entryId} {\n      // Allow read if authenticated - tenant check will happen at query level\n      // since we query by bankImportSessionId which is already company-scoped\n      allow read: if isAuthenticated();\n      allow create, update: if isAuthenticated() &&\n        request.resource.data.tenantId != null &&\n        belongsToCompany(request.resource.data.tenantId);\n      allow delete: if canManageCompanies();\n    }\n\n    // Staging general ledger entries (global collection with tenant scoping)\n    match /staging_general_ledger/{entryId} {\n      // Allow read if authenticated - tenant check will happen at query level\n      // since we query by bankImportSessionId which is already company-scoped\n      allow read: if isAuthenticated();\n      allow create, update: if isAuthenticated() &&\n        request.resource.data.tenantId != null &&\n        belongsToCompany(request.resource.data.tenantId);\n      allow delete: if canManageCompanies();\n    }\n\n// ====================================================================\n    // MULTI-TENANT COMPANY-SCOPED COLLECTIONS (CSC Pattern)\n    // ====================================================================\n\n    // Helper function to check if user belongs to a specific company\n    function belongsToCompany(companyId) {\n      return isAuthenticated() &&\n        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&\n        (\n          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyId == companyId ||\n          (\n            get(/databases/$(database)/documents/users/$(request.auth.uid)).data.accessibleCompanyIds != null &&\n            companyId in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.accessibleCompanyIds\n          )\n        );\n    }\n\n    // Helper function to check if user is admin of a specific company\n    function isCompanyAdmin(companyId) {\n      return belongsToCompany(companyId) && hasRole('admin');\n    }\n\n    // Company-scoped collections\n    match /companies/{companyId} {\n\n      // Bank accounts collection\n      match /bankAccounts/{bankAccountId} {\n        allow read: if belongsToCompany(companyId) || canManageCompanies();\n        allow create, update, delete: if canManageCompanies();\n      }\n\n      // Bank transfers collection\n      match /bankTransfers/{transferId} {\n        allow read: if belongsToCompany(companyId) || canManageCompanies();\n        allow create, update, delete: if canManageCompanies();\n      }\n\n      // Bank statements collection (company-scoped)\n      match /bankStatements/{statementId} {\n        allow read: if belongsToCompany(companyId) || canManageCompanies();\n        allow create: if belongsToCompany(companyId);\n        allow update: if belongsToCompany(companyId) || canManageCompanies();\n        allow delete: if belongsToCompany(companyId) || canManageCompanies();\n      }\n\n      // Ledger entries collection\n      match /ledgerEntries/{ledgerEntryId} {\n        allow read: if belongsToCompany(companyId) || canManageCompanies();\n        allow create, update: if belongsToCompany(companyId) || canManageCompanies();\n        allow delete: if false; // Ledger entries should never be deleted\n      }\n\n      // Journal entries collection\n      match /journalEntries/{journalId} {\n        allow read: if belongsToCompany(companyId) || canManageCompanies();\n        allow create, update: if belongsToCompany(companyId) || canManageCompanies();\n        allow delete: if false; // Journal entries should never be deleted\n      }\n\n      // Reconciliations collection with proper subcollections\n      match /reconciliations/{sessionId} {\n        allow read: if belongsToCompany(companyId) || canManageCompanies();\n        allow create: if belongsToCompany(companyId);\n        allow update: if belongsToCompany(companyId) || canManageCompanies();\n        allow delete: if canManageCompanies();\n\n        // Reconciliation matches subcollection\n        match /matches/{matchId} {\n          allow read: if belongsToCompany(companyId) || canManageCompanies();\n          allow create, update: if belongsToCompany(companyId) || canManageCompanies();\n          allow delete: if belongsToCompany(companyId) || canManageCompanies();\n        }\n\n        // Reconciliation adjustments subcollection\n        match /adjustments/{adjustmentId} {\n          allow read: if belongsToCompany(companyId) || canManageCompanies();\n          allow create, update: if belongsToCompany(companyId) || canManageCompanies();\n          allow delete: if canManageCompanies();\n        }\n      }\n\n      // Debtors collection - scoped to company\n      match /debtors/{debtorId} {\n        // Users can only read debtors from their own company\n        allow read: if belongsToCompany(companyId) || canManageCompanies();\n\n        // Users can create debtors for their own company\n        allow create: if belongsToCompany(companyId) &&\n          request.resource.data.companyId == companyId &&\n          request.resource.data.createdBy == request.auth.uid;\n\n        // Users can update debtors in their company (but not change companyId)\n        allow update: if belongsToCompany(companyId) &&\n          resource.data.companyId == companyId &&\n          (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['companyId', 'id', 'createdAt', 'createdBy']));\n\n        // Only company admins can delete debtors\n        allow delete: if isCompanyAdmin(companyId);\n      }\n\n      // Creditors collection - scoped to company\n      match /creditors/{creditorId} {\n        // Users can only read creditors from their own company\n        allow read: if belongsToCompany(companyId) || canManageCompanies();\n\n        // Users can create creditors for their own company\n        allow create: if belongsToCompany(companyId) &&\n          request.resource.data.companyId == companyId &&\n          request.resource.data.createdBy == request.auth.uid;\n\n        // Users can update creditors in their company (but not change companyId)\n        allow update: if belongsToCompany(companyId) &&\n          resource.data.companyId == companyId &&\n          (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['companyId', 'id', 'createdAt', 'createdBy']));\n\n        // Only company admins can delete creditors\n        allow delete: if isCompanyAdmin(companyId);\n      }\n\n      // Pending Payments collection - AI-matched payments awaiting allocation\n      match /pendingPayments/{paymentId} {\n        // Users can read pending payments from their own company\n        allow read: if belongsToCompany(companyId) || canManageCompanies();\n\n        // Users can create pending payments for their own company\n        allow create: if belongsToCompany(companyId) &&\n          request.resource.data.companyId == companyId &&\n          request.resource.data.createdBy == request.auth.uid;\n\n        // Users can update pending payments (allocations, status) but not core fields\n        allow update: if belongsToCompany(companyId) &&\n          resource.data.companyId == companyId &&\n          (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['companyId', 'id', 'createdAt', 'createdBy', 'amount', 'entityId', 'entityType', 'transactionDate']));\n\n        // Only company admins can delete pending payments\n        allow delete: if isCompanyAdmin(companyId) || canManageCompanies();\n      }\n\n      // Payments collection (customer receipts)\n      match /payments/{paymentId} {\n        // Users can read payments for their own company\n        allow read: if belongsToCompany(companyId) || canManageCompanies();\n\n        // Users can create payments for their company\n        allow create: if (belongsToCompany(companyId) || canManageCompanies()) &&\n          request.resource.data.companyId == companyId;\n\n        // Users can update payments in their company (e.g., allocation, status)\n        allow update: if (belongsToCompany(companyId) || canManageCompanies()) &&\n          resource.data.companyId == companyId &&\n          (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['companyId']));\n\n        // Only company admins or platform admins can delete payments\n        allow delete: if isCompanyAdmin(companyId) || canManageCompanies();\n      }\n\n      // Statements collection (customer & supplier statements)\n      match /statements/{statementId} {\n        // Members of the company (or admins/developers) can read statements\n        allow read: if belongsToCompany(companyId) || canManageCompanies();\n\n        // Members can generate statements for their company\n        allow create: if (belongsToCompany(companyId) || canManageCompanies()) &&\n          request.resource.data.companyId == companyId;\n\n        // Members can update statements for their company (e.g., change status),\n        // but the statement must stay scoped to the same company.\n        allow update: if (belongsToCompany(companyId) || canManageCompanies()) &&\n          resource.data.companyId == companyId &&\n          (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['companyId']));\n\n        // Only company admins or platform admins/developers can delete statements\n        allow delete: if isCompanyAdmin(companyId) || canManageCompanies();\n      }\n\n      // Transactions collection - scoped to company\n      match /transactions/{transactionId} {\n        // Users can only read transactions from their own company\n        allow read: if belongsToCompany(companyId);\n\n        // Users can create transactions for their own company\n        allow create: if belongsToCompany(companyId) &&\n          request.resource.data.companyId == companyId &&\n          request.resource.data.createdBy == request.auth.uid;\n\n        // Users can update transactions (status, dates) but not core fields\n        allow update: if belongsToCompany(companyId) &&\n          resource.data.companyId == companyId &&\n          (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['companyId', 'id', 'createdAt', 'createdBy', 'amount', 'entityId', 'entityType']));\n\n        // Only company admins can delete transactions\n        allow delete: if isCompanyAdmin(companyId);\n      }\n\n      // Cash flow forecasts collection\n      match /cashFlowForecasts/{forecastId} {\n        allow read: if belongsToCompany(companyId) || canManageCompanies();\n        allow create, update: if belongsToCompany(companyId) || canManageCompanies();\n        allow delete: if canManageCompanies();\n      }\n\n      // Chart of accounts for company\n      match /chartOfAccounts/{accountId} {\n        allow read: if belongsToCompany(companyId) || canManageCompanies();\n        allow create, update, delete: if canManageCompanies();\n      }\n\n      // GL Mapping Rules for bank-to-ledger import\n      match /glMappingRules/{ruleId} {\n        allow read: if belongsToCompany(companyId) || canManageCompanies();\n        allow create, update, delete: if canManageCompanies();\n      }\n\n      // Bank Import Sessions for tracking statement imports\n      match /bankImportSessions/{sessionId} {\n        allow read: if belongsToCompany(companyId) || canManageCompanies();\n        allow create: if belongsToCompany(companyId);\n        allow update: if belongsToCompany(companyId) || canManageCompanies();\n        allow delete: if canManageCompanies();\n      }\n\n      // Configuration subcollection (industry settings, feature flags, etc.)\n      match /configuration/{configDoc} {\n        allow read: if belongsToCompany(companyId) || canManageCompanies();\n        allow create, update, delete: if canManageCompanies();\n      }\n\n      // Service Level Agreements (SLAs) collection - named serviceAgreements in the code\n      match /serviceAgreements/{slaId} {\n        // Users can read SLAs from their own company\n        allow read: if belongsToCompany(companyId) || canManageCompanies();\n\n        // Users can create SLAs for their own company\n        allow create: if belongsToCompany(companyId) &&\n          request.resource.data.companyId == companyId;\n\n        // Users can update SLAs in their company\n        allow update: if belongsToCompany(companyId) &&\n          resource.data.companyId == companyId;\n\n        // Only company admins can delete SLAs\n        allow delete: if isCompanyAdmin(companyId) || canManageCompanies();\n\n        // SLA line items subcollection\n        match /lineItems/{lineItemId} {\n          allow read: if belongsToCompany(companyId) || canManageCompanies();\n          allow create, update: if belongsToCompany(companyId) || canManageCompanies();\n          allow delete: if isCompanyAdmin(companyId) || canManageCompanies();\n        }\n\n        // SLA history/audit subcollection\n        match /history/{historyId} {\n          allow read: if belongsToCompany(companyId) || canManageCompanies();\n          allow create: if belongsToCompany(companyId) || canManageCompanies();\n          allow update, delete: if false; // History should be immutable\n        }\n      }\n\n      // Invoices collection (for SLA-generated and ad-hoc invoices)\n      match /invoices/{invoiceId} {\n        // Users can read invoices from their own company\n        allow read: if belongsToCompany(companyId) || canManageCompanies();\n\n        // Users can create invoices for their own company\n        allow create: if belongsToCompany(companyId) &&\n          request.resource.data.companyId == companyId;\n\n        // Users can update invoices (e.g., status, payment info)\n        allow update: if belongsToCompany(companyId) &&\n          resource.data.companyId == companyId;\n\n        // Only company admins can delete invoices\n        allow delete: if isCompanyAdmin(companyId) || canManageCompanies();\n\n        // Invoice line items subcollection\n        match /lineItems/{lineItemId} {\n          allow read: if belongsToCompany(companyId) || canManageCompanies();\n          allow create, update: if belongsToCompany(companyId) || canManageCompanies();\n          allow delete: if isCompanyAdmin(companyId) || canManageCompanies();\n        }\n\n        // Invoice payments subcollection\n        match /payments/{paymentId} {\n          allow read: if belongsToCompany(companyId) || canManageCompanies();\n          allow create: if belongsToCompany(companyId) || canManageCompanies();\n          allow update: if belongsToCompany(companyId) || canManageCompanies();\n          allow delete: if false; // Payments should not be deleted\n        }\n      }\n\n      // Quotes collection\n      match /quotes/{quoteId} {\n        // Users can read quotes from their own company\n        allow read: if belongsToCompany(companyId) || canManageCompanies();\n\n        // Users can create quotes for any company (workspace access checked in app)\n        allow create: if isAuthenticated() &&\n          request.resource.data.companyId == companyId;\n\n        // Users can update quotes in their company\n        allow update: if belongsToCompany(companyId) &&\n          resource.data.companyId == companyId;\n\n        // Only company admins can delete quotes\n        allow delete: if isCompanyAdmin(companyId) || canManageCompanies();\n      }\n\n      // Credit notes collection\n      match /creditNotes/{creditNoteId} {\n        // Users can read credit notes for their own company\n        allow read: if belongsToCompany(companyId) || canManageCompanies();\n\n        // Users can create credit notes for their company\n        allow create: if (belongsToCompany(companyId) || canManageCompanies()) &&\n          request.resource.data.companyId == companyId;\n\n        // Users can update credit notes in their company (e.g., allocations, status)\n        allow update: if (belongsToCompany(companyId) || canManageCompanies()) &&\n          resource.data.companyId == companyId &&\n          (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['companyId']));\n\n        // Only company admins or platform admins can delete credit notes\n        allow delete: if isCompanyAdmin(companyId) || canManageCompanies();\n      }\n\n      // Sales orders collection\n      match /salesOrders/{salesOrderId} {\n        // Users can read sales orders from their own company\n        allow read: if belongsToCompany(companyId) || canManageCompanies();\n\n        // Users can create sales orders for their own company\n        allow create: if belongsToCompany(companyId) &&\n          request.resource.data.companyId == companyId;\n\n        // Users can update sales orders\n        allow update: if belongsToCompany(companyId) &&\n          resource.data.companyId == companyId;\n\n        // Only company admins can delete sales orders\n        allow delete: if isCompanyAdmin(companyId) || canManageCompanies();\n      }\n\n      // ====================================================================\n      // ACCOUNTS PAYABLE COLLECTIONS (Phase 2)\n      // ====================================================================\n\n      // Purchase Orders collection\n      match /purchaseOrders/{poId} {\n        // Read: Anyone in company\n        allow read: if belongsToCompany(companyId) || canManageCompanies();\n\n        // Create: Anyone in company\n        allow create: if belongsToCompany(companyId) &&\n          request.resource.data.companyId == companyId;\n\n        // Update: Creator (draft), admin/financial_admin (any status)\n        allow update: if belongsToCompany(companyId) &&\n                         (resource.data.createdBy == request.auth.uid ||\n                          hasRole('admin') ||\n                          hasRole('financial_admin')) ||\n                         canManageCompanies();\n\n        // Delete: Admin only, draft only\n        allow delete: if (belongsToCompany(companyId) &&\n                          hasRole('admin') &&\n                          resource.data.status == 'draft') ||\n                         canManageCompanies();\n      }\n\n      // Vendor Bills collection\n      match /vendorBills/{billId} {\n        // Read: Anyone in company\n        allow read: if belongsToCompany(companyId) || canManageCompanies();\n\n        // Create: Anyone in company\n        allow create: if belongsToCompany(companyId) &&\n          request.resource.data.companyId == companyId;\n\n        // Update: Draft/pending can be updated by creator or admin/financial_admin\n        //         Posted bills are immutable (except by super admin for corrections)\n        allow update: if (belongsToCompany(companyId) &&\n                          ((resource.data.status == 'draft' || resource.data.status == 'pending_approval') ||\n                           hasRole('admin') ||\n                           hasRole('financial_admin'))) ||\n                         canManageCompanies();\n\n        // Delete: Admin only, draft only\n        allow delete: if (belongsToCompany(companyId) &&\n                          hasRole('admin') &&\n                          resource.data.status == 'draft') ||\n                         canManageCompanies();\n      }\n\n      // Vendor Payments collection (AP payments to suppliers)\n      match /vendorPayments/{paymentId} {\n        // Read: Anyone in company\n        allow read: if belongsToCompany(companyId) || canManageCompanies();\n\n        // Create: Anyone in company\n        allow create: if belongsToCompany(companyId) &&\n          request.resource.data.companyId == companyId;\n\n        // Update: Draft/pending by creator or admin/financial_admin\n        //         Processed payments can only be voided by admin\n        allow update: if (belongsToCompany(companyId) &&\n                          ((resource.data.status == 'draft' || resource.data.status == 'pending_approval') ||\n                           hasRole('admin'))) ||\n                         canManageCompanies();\n\n        // Delete: Admin only, draft only\n        allow delete: if (belongsToCompany(companyId) &&\n                          hasRole('admin') &&\n                          resource.data.status == 'draft') ||\n                         canManageCompanies();\n      }\n\n      // Payment Runs collection (batch payment processing)\n      match /paymentRuns/{runId} {\n        // Read: Anyone in company\n        allow read: if belongsToCompany(companyId) || canManageCompanies();\n\n        // Create/Update: Only admin\n        allow create, update: if (belongsToCompany(companyId) && hasRole('admin')) ||\n                                 canManageCompanies();\n\n        // Delete: Admin only, draft only\n        allow delete: if (belongsToCompany(companyId) &&\n                          hasRole('admin') &&\n                          resource.data.status == 'draft') ||\n                         canManageCompanies();\n      }\n\n      // Company audit logs - read-only for users\n      match /auditLogs/{logId} {\n        // Only company admins can read audit logs\n        allow read: if isCompanyAdmin(companyId);\n\n        // System-only writes (through Cloud Functions)\n        allow write: if false;\n      }\n    }\n  }\n}\n","name":"firestore.rules"}]},"createTime":"2025-10-21T06:24:26.510335Z","metadata":{"services":["cloud.firestore"]}}
[debug] [2025-10-21T06:24:26.707Z] [rules] created ruleset projects/peakflow-3a2ed/rulesets/2c5a7ca4-007f-473b-b230-8b06a1b57a75
[debug] [2025-10-21T06:24:26.708Z] [rules] releasing cloud.firestore/(default) with ruleset projects/peakflow-3a2ed/rulesets/2c5a7ca4-007f-473b-b230-8b06a1b57a75
[debug] [2025-10-21T06:24:26.708Z] Checked if tokens are valid: true, expires at: 1761031456500
[debug] [2025-10-21T06:24:26.708Z] Checked if tokens are valid: true, expires at: 1761031456500
[debug] [2025-10-21T06:24:26.709Z] >>> [apiv2][query] PATCH https://firebaserules.googleapis.com/v1/projects/peakflow-3a2ed/releases/cloud.firestore/(default) [none]
[debug] [2025-10-21T06:24:26.709Z] >>> [apiv2][body] PATCH https://firebaserules.googleapis.com/v1/projects/peakflow-3a2ed/releases/cloud.firestore/(default) {"release":{"name":"projects/peakflow-3a2ed/releases/cloud.firestore/(default)","rulesetName":"projects/peakflow-3a2ed/rulesets/2c5a7ca4-007f-473b-b230-8b06a1b57a75"}}
[debug] [2025-10-21T06:24:27.521Z] <<< [apiv2][status] PATCH https://firebaserules.googleapis.com/v1/projects/peakflow-3a2ed/releases/cloud.firestore/(default) 200
[debug] [2025-10-21T06:24:27.522Z] <<< [apiv2][body] PATCH https://firebaserules.googleapis.com/v1/projects/peakflow-3a2ed/releases/cloud.firestore/(default) {"name":"projects/peakflow-3a2ed/releases/cloud.firestore","rulesetName":"projects/peakflow-3a2ed/rulesets/2c5a7ca4-007f-473b-b230-8b06a1b57a75","createTime":"2025-07-12T19:56:35.110176Z","updateTime":"2025-10-21T06:24:27.266238Z"}
[debug] [2025-10-21T06:24:27.522Z] [rules] updated release projects/peakflow-3a2ed/releases/cloud.firestore
[info] ✔  firestore: released rules firestore.rules to cloud.firestore 
[info] 
[info] ✔  Deploy complete! 
[info] 
[info] Project Console: https://console.firebase.google.com/project/peakflow-3a2ed/overview
