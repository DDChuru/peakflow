'use client';

import { useState, useEffect } from 'react';
import { useParams, useRouter } from 'next/navigation';
import { WorkspaceLayout } from '@/components/layout/WorkspaceLayout';
import ProtectedRoute from '@/components/auth/ProtectedRoute';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from '@/components/ui/dialog';
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from '@/components/ui/alert-dialog';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu';
import { Plus, FileText, Search, MoreHorizontal, AlertCircle, Eye, Edit, Trash2, X, Send, DollarSign, BookOpen, AlertTriangle, CheckCircle2, Calendar } from 'lucide-react';
import { useWorkspaceAccess } from '@/hooks/useWorkspaceAccess';
import { useAuth } from '@/contexts/AuthContext';
import { InvoiceService } from '@/lib/accounting/invoice-service';
import { DebtorService } from '@/lib/firebase/debtor-service';
import { ChartOfAccountsService } from '@/lib/accounting/chart-of-accounts-service';
import { Invoice, InvoiceLineItem, InvoiceStatus, InvoicePayment } from '@/types/accounting/invoice';
import { Debtor } from '@/types/financial';
import { ChartOfAccount } from '@/types/accounting/chart-of-accounts';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import * as z from 'zod';
import toast from 'react-hot-toast';

// Zod schema for form validation
const lineItemSchema = z.object({
  description: z.string().min(1, 'Description is required'),
  quantity: z.coerce.number().min(0.01, 'Quantity must be greater than 0'),
  unitPrice: z.coerce.number().min(0, 'Unit price cannot be negative'),
  glAccountId: z.string().min(1, 'GL Account is required'),
  taxRate: z.coerce.number().min(0).max(100).optional(),
});

const invoiceSchema = z.object({
  customerId: z.string().min(1, 'Customer is required'),
  invoiceDate: z.string().min(1, 'Invoice date is required'),
  dueDate: z.string().optional(),
  paymentTerms: z.coerce.number().min(0).default(30),
  purchaseOrderNumber: z.string().optional(),
  currency: z.string().default('ZAR'),
  notes: z.string().optional(),
  termsAndConditions: z.string().optional(),
  lineItems: z.array(lineItemSchema).min(1, 'At least one line item required'),
});

type InvoiceFormData = z.infer<typeof invoiceSchema>;

export default function InvoicesPage() {
  const params = useParams();
  const companyId = params.companyId as string;
  const router = useRouter();
  const { user } = useAuth();
  const { canAccess, loading: accessLoading, error: accessError } = useWorkspaceAccess(companyId);

  const [invoices, setInvoices] = useState<Invoice[]>([]);
  const [customers, setCustomers] = useState<Debtor[]>([]);
  const [glAccounts, setGLAccounts] = useState<ChartOfAccount[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [invoiceService] = useState(() => new InvoiceService());
  const [debtorService] = useState(() => new DebtorService();
  const [searchTerm, setSearchTerm] = useState('');
  const [statusFilter, setStatusFilter] = useState<InvoiceStatus | 'all'>('all');

  // Dialog states
  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);
  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);
  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);
  const [isViewDialogOpen, setIsViewDialogOpen] = useState(false);
  const [isPaymentDialogOpen, setIsPaymentDialogOpen] = useState(false);
  const [selectedInvoice, setSelectedInvoice] = useState<Invoice | null>(null);
  const [isSubmitting, setIsSubmitting] = useState(false);

  // Payment dialog state
  const [paymentAmount, setPaymentAmount] = useState(0);
  const [paymentMethod, setPaymentMethod] = useState<'cash' | 'check' | 'bank_transfer' | 'card' | 'other'>('bank_transfer');
  const [paymentDate, setPaymentDate] = useState(new Date().toISOString().split('T')[0]);
  const [paymentReference, setPaymentReference] = useState('');
  const [paymentNotes, setPaymentNotes] = useState('');

  // Line items state for forms
  const [formLineItems, setFormLineItems] = useState<Array<Partial<InvoiceLineItem>>>([
    { description: '', quantity: 1, unitPrice: 0, glAccountId: '', taxRate: 0 }
  ]);

  // React Hook Form
  const {
    register,
    handleSubmit,
    reset,
    setValue,
    watch,
    formState: { errors },
  } = useForm<InvoiceFormData>({
    resolver: zodResolver(invoiceSchema),
    defaultValues: {
      customerId: '',
      invoiceDate: new Date().toISOString().split('T')[0],
      dueDate: '',
      paymentTerms: 30,
      purchaseOrderNumber: '',
      currency: 'ZAR',
      notes: '',
      termsAndConditions: '',
      lineItems: formLineItems as any,
    },
  });

  const watchedInvoiceDate = watch('invoiceDate');
  const watchedPaymentTerms = watch('paymentTerms');

  useEffect(() => {
    if (canAccess && companyId && user) {
      loadData();
    }
  }, [canAccess, companyId, user]);

  // Auto-calculate due date when invoice date or payment terms change
  useEffect(() => {
    if (watchedInvoiceDate && watchedPaymentTerms !== undefined) {
      const dueDate = calculateDueDate(watchedInvoiceDate, watchedPaymentTerms);
      setValue('dueDate', dueDate);
    }
  }, [watchedInvoiceDate, watchedPaymentTerms, setValue]);

  const loadData = async () => {
    try {
      setLoading(true);
      setError(null);
      await Promise.all([loadInvoices(), loadCustomers(), loadGLAccounts()]);
    } catch (err: any) {
      setError(err.message || 'Failed to load data');
      toast.error('Failed to load data');
    } finally {
      setLoading(false);
    }
  };

  const loadInvoices = async () => {
    const data = await invoiceService.getInvoices(companyId);
    setInvoices(data);
  };

  const loadCustomers = async () => {
    const data = await debtorService.getDebtors(companyId);
    setCustomers(data);
  };

  const loadGLAccounts = async () => {
    const coaService = new ChartOfAccountsService(companyId);
    const accounts = await coaService.getAccounts();
    // Filter to revenue accounts for line items
    setGLAccounts(accounts.filter(a => a.type === 'revenue'));
  };

  const addLineItem = () => {
    setFormLineItems([...formLineItems, { description: '', quantity: 1, unitPrice: 0, glAccountId: '', taxRate: 0 }]);
  };

  const removeLineItem = (index: number) => {
    if (formLineItems.length > 1) {
      setFormLineItems(formLineItems.filter((_, i) => i !== index));
    }
  };

  const updateLineItem = (index: number, field: keyof InvoiceLineItem, value: any) => {
    const updated = [...formLineItems];
    updated[index] = { ...updated[index], [field]: value };

    // Auto-calculate amount
    if (field === 'quantity' || field === 'unitPrice') {
      const quantity = field === 'quantity' ? parseFloat(value) || 0 : updated[index].quantity || 0;
      const unitPrice = field === 'unitPrice' ? parseFloat(value) || 0 : updated[index].unitPrice || 0;
      updated[index].amount = quantity * unitPrice;
    }

    setFormLineItems(updated);
  };

  const calculateTotal = () => {
    return formLineItems.reduce((sum, item) => {
      const quantity = item.quantity || 0;
      const unitPrice = item.unitPrice || 0;
      return sum + (quantity * unitPrice);
    }, 0);
  };

  const calculateDueDate = (invoiceDate: string, paymentTerms: number): string => {
    const date = new Date(invoiceDate);
    date.setDate(date.getDate() + paymentTerms);
    return date.toISOString().split('T')[0];
  };

  const handleCreate = async (data: InvoiceFormData) => {
    if (!user) return;

    setIsSubmitting(true);
    try {
      // Build invoice data with only defined values
      const invoiceData: any = {
        customerId: data.customerId,
        invoiceDate: data.invoiceDate,
        paymentTerms: data.paymentTerms,
        source: 'manual' as const,
        currency: data.currency,
        lineItems: formLineItems.map(item => ({
          description: item.description,
          quantity: item.quantity,
          unitPrice: item.unitPrice,
          glAccountId: item.glAccountId,
          taxRate: item.taxRate || undefined,
        })),
      };

      // Only add optional fields if they have values
      if (data.notes) invoiceData.notes = data.notes;
      if (data.termsAndConditions) invoiceData.termsAndConditions = data.termsAndConditions;
      if (data.purchaseOrderNumber) invoiceData.purchaseOrderNumber = data.purchaseOrderNumber;

      await invoiceService.createDirectInvoice(companyId, invoiceData, user.uid);
      toast.success('Invoice created successfully');
      setIsCreateDialogOpen(false);
      reset();
      setFormLineItems([{ description: '', quantity: 1, unitPrice: 0, glAccountId: '', taxRate: 0 }]);
      await loadInvoices();
    } catch (error: any) {
      console.error('Error creating invoice:', error);
      toast.error(error.message || 'Failed to create invoice');
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleDelete = async () => {
    if (!user || !selectedInvoice) return;

    setIsSubmitting(true);
    try {
      await invoiceService.updateInvoiceStatus(companyId, selectedInvoice.id, 'cancelled', user.uid);
      toast.success('Invoice cancelled successfully');
      setIsDeleteDialogOpen(false);
      setSelectedInvoice(null);
      await loadInvoices();
    } catch (error: any) {
      console.error('Error deleting invoice:', error);
      toast.error(error.message || 'Failed to cancel invoice');
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleSendInvoice = async (invoice: Invoice) => {
    if (!user) return;

    try {
      await invoiceService.updateInvoiceStatus(companyId, invoice.id, 'sent', user.uid);
      toast.success('Invoice sent to customer');
      await loadInvoices();
    } catch (error: any) {
      toast.error('Failed to send invoice');
    }
  };

  const openPaymentDialog = (invoice: Invoice) => {
    setSelectedInvoice(invoice);
    setPaymentAmount(invoice.amountDue);
    setPaymentMethod('bank_transfer');
    setPaymentDate(new Date().toISOString().split('T')[0]);
    setPaymentReference('');
    setPaymentNotes('');
    setIsPaymentDialogOpen(true);
  };

  const handleRecordPayment = async () => {
    if (!user || !selectedInvoice) return;

    if (paymentAmount <= 0) {
      toast.error('Payment amount must be greater than zero');
      return;
    }

    if (paymentAmount > selectedInvoice.amountDue) {
      toast.error('Payment amount cannot exceed amount due');
      return;
    }

    setIsSubmitting(true);
    try {
      await invoiceService.recordPayment(
        companyId,
        selectedInvoice.id,
        {
          paymentDate,
          amount: paymentAmount,
          paymentMethod,
          reference: paymentReference || undefined,
          notes: paymentNotes || undefined,
        },
        user.uid
      );

      toast.success('Payment recorded successfully');
      setIsPaymentDialogOpen(false);
      setSelectedInvoice(null);
      await loadInvoices();
    } catch (error: any) {
      console.error('Error recording payment:', error);
      toast.error(error.message || 'Failed to record payment');
    } finally {
      setIsSubmitting(false);
    }
  };

  const handlePostToGL = async (invoice: Invoice) => {
    if (!user) return;

    try {
      // TODO: Implement postToGL in invoice service
      // await invoiceService.postToGL(companyId, invoice.id, user.uid);
      toast.success('Invoice posted to general ledger');
      await loadInvoices();
    } catch (error: any) {
      console.error('Error posting to GL:', error);
      toast.error(error.message || 'Failed to post to GL');
    }
  };

  const openCreateDialog = () => {
    reset();
    setFormLineItems([{ description: '', quantity: 1, unitPrice: 0, glAccountId: '', taxRate: 0 }]);
    setIsCreateDialogOpen(true);
  };

  const openViewDialog = (invoice: Invoice) => {
    setSelectedInvoice(invoice);
    setIsViewDialogOpen(true);
  };

  const openDeleteDialog = (invoice: Invoice) => {
    setSelectedInvoice(invoice);
    setIsDeleteDialogOpen(true);
  };

  const getStatusColor = (status: InvoiceStatus) => {
    switch (status) {
      case 'draft':
        return 'bg-gray-100 text-gray-800';
      case 'sent':
        return 'bg-blue-100 text-blue-800';
      case 'paid':
        return 'bg-green-100 text-green-800';
      case 'partial':
        return 'bg-yellow-100 text-yellow-800';
      case 'overdue':
        return 'bg-red-100 text-red-800';
      case 'cancelled':
        return 'bg-gray-100 text-gray-800';
      default:
        return 'bg-gray-100 text-gray-800';
    }
  };

  const isOverdue = (invoice: Invoice): boolean => {
    if (invoice.status === 'paid' || invoice.status === 'cancelled') return false;
    const dueDate = new Date(invoice.dueDate);
    const today = new Date();
    return dueDate < today && invoice.amountDue > 0;
  };

  const filteredInvoices = invoices.filter(invoice => {
    const matchesSearch = invoice.invoiceNumber.toLowerCase().includes(searchTerm.toLowerCase()) ||
                          (invoice.customerName && invoice.customerName.toLowerCase().includes(searchTerm.toLowerCase())) ||
                          (invoice.purchaseOrderNumber && invoice.purchaseOrderNumber.toLowerCase().includes(searchTerm.toLowerCase()));
    const matchesStatus = statusFilter === 'all' || invoice.status === statusFilter;
    return matchesSearch && matchesStatus;
  });

  // Calculate summary statistics
  const totalInvoices = invoices.length;
  const outstandingAmount = invoices
    .filter(inv => inv.status !== 'paid' && inv.status !== 'cancelled')
    .reduce((sum, inv) => sum + inv.amountDue, 0);
  const overdueCount = invoices.filter(inv => isOverdue(inv)).length;

  // Calculate paid this month
  const thisMonth = new Date();
  thisMonth.setDate(1);
  thisMonth.setHours(0, 0, 0, 0);
  const paidThisMonth = invoices
    .filter(inv => {
      if (inv.status !== 'paid' || !inv.paymentHistory || inv.paymentHistory.length === 0) return false;
      const lastPayment = inv.paymentHistory[inv.paymentHistory.length - 1];
      const paymentDate = new Date(lastPayment.paymentDate);
      return paymentDate >= thisMonth;
    })
    .reduce((sum, inv) => sum + inv.totalAmount, 0);

  if (accessLoading) {
    return (
      <WorkspaceLayout companyId={companyId}>
        <div className="container mx-auto p-6 max-w-7xl">
          <div className="flex items-center justify-center h-64">
            <div className="text-center">
              <div className="animate-spin h-8 w-8 border-4 border-indigo-600 border-t-transparent rounded-full mx-auto mb-4"></div>
              <p className="text-gray-600">Checking workspace access...</p>
            </div>
          </div>
        </div>
      </WorkspaceLayout>
    );
  }

  if (!canAccess) {
    return (
      <WorkspaceLayout companyId={companyId}>
        <div className="container mx-auto p-6 max-w-7xl space-y-4">
          <Alert>
            <AlertCircle className="h-4 w-4" />
            <AlertDescription>
              {accessError || 'You do not have access to this workspace.'}
            </AlertDescription>
          </Alert>
          <Button onClick={() => router.push('/dashboard')}>Return to Dashboard</Button>
        </div>
      </WorkspaceLayout>
    );
  }

  if (loading) {
    return (
      <ProtectedRoute requireCompany>
        <WorkspaceLayout companyId={companyId}>
          <div className="p-6 max-w-7xl mx-auto">
            <div className="flex items-center justify-center h-64">
              <div className="text-center">
                <div className="animate-spin h-8 w-8 border-4 border-indigo-600 border-t-transparent rounded-full mx-auto mb-4"></div>
                <p className="text-gray-600">Loading invoices...</p>
              </div>
            </div>
          </div>
        </WorkspaceLayout>
      </ProtectedRoute>
    );
  }

  return (
    <ProtectedRoute requireCompany>
      <WorkspaceLayout companyId={companyId}>
        <div className="p-6 max-w-7xl mx-auto">
          {/* Header */}
          <div className="flex justify-between items-center mb-6">
            <div>
              <h1 className="text-2xl font-bold text-gray-900">Invoices</h1>
              <p className="text-gray-600">Manage customer invoices and track payments</p>
            </div>
            <Button onClick={openCreateDialog}>
              <Plus className="h-4 w-4 mr-2" />
              New Invoice
            </Button>
          </div>

          {/* Summary Cards */}
          <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
            <Card>
              <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                <CardTitle className="text-sm font-medium">Total Invoices</CardTitle>
                <FileText className="h-4 w-4 text-muted-foreground" />
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold">{totalInvoices}</div>
                <p className="text-xs text-muted-foreground">All invoices</p>
              </CardContent>
            </Card>

            <Card>
              <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                <CardTitle className="text-sm font-medium">Outstanding</CardTitle>
                <AlertTriangle className="h-4 w-4 text-orange-500" />
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold">R{outstandingAmount.toLocaleString()}</div>
                <p className="text-xs text-muted-foreground">Amount due</p>
              </CardContent>
            </Card>

            <Card>
              <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                <CardTitle className="text-sm font-medium">Overdue</CardTitle>
                <AlertCircle className="h-4 w-4 text-red-500" />
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold">{overdueCount}</div>
                <p className="text-xs text-muted-foreground">Invoices past due</p>
              </CardContent>
            </Card>

            <Card>
              <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                <CardTitle className="text-sm font-medium">Paid This Month</CardTitle>
                <CheckCircle2 className="h-4 w-4 text-green-600" />
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold">R{paidThisMonth.toLocaleString()}</div>
                <p className="text-xs text-muted-foreground">Revenue received</p>
              </CardContent>
            </Card>
          </div>

          {/* Filters and Search */}
          <div className="flex gap-4 mb-6">
            <div className="relative flex-1">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4" />
              <input
                type="text"
                placeholder="Search invoices..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
              />
            </div>
            <select
              value={statusFilter}
              onChange={(e) => setStatusFilter(e.target.value as InvoiceStatus | 'all')}
              className="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
            >
              <option value="all">All Status</option>
              <option value="draft">Draft</option>
              <option value="sent">Sent</option>
              <option value="paid">Paid</option>
              <option value="partial">Partial</option>
              <option value="overdue">Overdue</option>
              <option value="cancelled">Cancelled</option>
            </select>
          </div>

          {/* Invoices Table */}
          <Card>
            <CardHeader>
              <CardTitle>Customer Invoices</CardTitle>
              <CardDescription>
                All invoices with their payment status and details
              </CardDescription>
            </CardHeader>
            <CardContent>
              {filteredInvoices.length === 0 ? (
                <div className="text-center py-12">
                  <FileText className="h-12 w-12 text-gray-400 mx-auto mb-4" />
                  <h3 className="text-lg font-medium text-gray-900 mb-2">No invoices found</h3>
                  <p className="text-gray-600 mb-4">Get started by creating your first invoice</p>
                  <Button onClick={openCreateDialog}>
                    <Plus className="h-4 w-4 mr-2" />
                    Create Invoice
                  </Button>
                </div>
              ) : (
                <div className="overflow-x-auto">
                  <table className="w-full">
                    <thead>
                      <tr className="border-b">
                        <th className="text-left py-3 px-4 font-medium text-gray-500">Invoice #</th>
                        <th className="text-left py-3 px-4 font-medium text-gray-500">Customer</th>
                        <th className="text-left py-3 px-4 font-medium text-gray-500">Amount</th>
                        <th className="text-left py-3 px-4 font-medium text-gray-500">Paid</th>
                        <th className="text-left py-3 px-4 font-medium text-gray-500">Due</th>
                        <th className="text-left py-3 px-4 font-medium text-gray-500">Status</th>
                        <th className="text-left py-3 px-4 font-medium text-gray-500">Due Date</th>
                        <th className="text-left py-3 px-4 font-medium text-gray-500">Actions</th>
                      </tr>
                    </thead>
                    <tbody>
                      {filteredInvoices.map((invoice) => (
                        <tr key={invoice.id} className={`border-b hover:bg-gray-50 ${isOverdue(invoice) ? 'bg-red-50' : ''}`}>
                          <td className="py-3 px-4">
                            <span className="font-medium text-indigo-600">{invoice.invoiceNumber}</span>
                            {invoice.source !== 'manual' && (
                              <Badge className="ml-2 text-xs" variant="outline">
                                {invoice.source.toUpperCase()}
                              </Badge>
                            )}
                          </td>
                          <td className="py-3 px-4">{invoice.customerName || 'Unknown'}</td>
                          <td className="py-3 px-4 font-medium">
                            {invoice.currency} {invoice.totalAmount.toLocaleString()}
                          </td>
                          <td className="py-3 px-4 text-green-600 font-medium">
                            {invoice.currency} {invoice.amountPaid.toLocaleString()}
                          </td>
                          <td className="py-3 px-4 text-orange-600 font-medium">
                            {invoice.currency} {invoice.amountDue.toLocaleString()}
                          </td>
                          <td className="py-3 px-4">
                            <Badge className={getStatusColor(invoice.status)}>
                              {invoice.status.charAt(0).toUpperCase() + invoice.status.slice(1)}
                            </Badge>
                            {invoice.journalEntryId && (
                              <Badge className="ml-2 bg-purple-100 text-purple-800">GL Posted</Badge>
                            )}
                          </td>
                          <td className={`py-3 px-4 ${isOverdue(invoice) ? 'text-red-600 font-semibold' : 'text-gray-600'}`}>
                            {new Date(invoice.dueDate).toLocaleDateString()}
                            {isOverdue(invoice) && (
                              <span className="ml-2 text-xs">(OVERDUE)</span>
                            )}
                          </td>
                          <td className="py-3 px-4">
                            <DropdownMenu>
                              <DropdownMenuTrigger asChild>
                                <Button variant="ghost" size="sm">
                                  <MoreHorizontal className="h-4 w-4" />
                                </Button>
                              </DropdownMenuTrigger>
                              <DropdownMenuContent align="end">
                                <DropdownMenuItem onClick={() => openViewDialog(invoice)}>
                                  <Eye className="h-4 w-4 mr-2" />
                                  View Details
                                </DropdownMenuItem>
                                {invoice.status === 'draft' && (
                                  <DropdownMenuItem onClick={() => handleSendInvoice(invoice)}>
                                    <Send className="h-4 w-4 mr-2" />
                                    Send to Customer
                                  </DropdownMenuItem>
                                )}
                                {invoice.status !== 'paid' && invoice.status !== 'cancelled' && (
                                  <DropdownMenuItem onClick={() => openPaymentDialog(invoice)}>
                                    <DollarSign className="h-4 w-4 mr-2" />
                                    Record Payment
                                  </DropdownMenuItem>
                                )}
                                {!invoice.journalEntryId && invoice.status !== 'draft' && invoice.status !== 'cancelled' && (
                                  <DropdownMenuItem onClick={() => handlePostToGL(invoice)}>
                                    <BookOpen className="h-4 w-4 mr-2" />
                                    Post to GL
                                  </DropdownMenuItem>
                                )}
                                <DropdownMenuSeparator />
                                <DropdownMenuItem
                                  onClick={() => openDeleteDialog(invoice)}
                                  className="text-red-600"
                                >
                                  <Trash2 className="h-4 w-4 mr-2" />
                                  Cancel Invoice
                                </DropdownMenuItem>
                              </DropdownMenuContent>
                            </DropdownMenu>
                          </td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
              )}
            </CardContent>
          </Card>

          {/* Create Dialog - Same structure as Quotes */}
          {/* Payment Dialog */}
          <Dialog open={isPaymentDialogOpen} onOpenChange={setIsPaymentDialogOpen}>
            <DialogContent className="max-w-md">
              <DialogHeader>
                <DialogTitle>Record Payment</DialogTitle>
                <DialogDescription>
                  Record a payment for invoice {selectedInvoice?.invoiceNumber}
                </DialogDescription>
              </DialogHeader>

              {selectedInvoice && (
                <div className="space-y-4">
                  <div className="bg-gray-50 p-4 rounded-lg">
                    <div className="flex justify-between mb-2">
                      <span className="text-sm text-gray-600">Invoice Total:</span>
                      <span className="font-medium">{selectedInvoice.currency} {selectedInvoice.totalAmount.toLocaleString()}</span>
                    </div>
                    <div className="flex justify-between mb-2">
                      <span className="text-sm text-gray-600">Amount Paid:</span>
                      <span className="text-green-600 font-medium">{selectedInvoice.currency} {selectedInvoice.amountPaid.toLocaleString()}</span>
                    </div>
                    <div className="flex justify-between pt-2 border-t">
                      <span className="font-medium">Amount Due:</span>
                      <span className="text-lg font-bold text-orange-600">{selectedInvoice.currency} {selectedInvoice.amountDue.toLocaleString()}</span>
                    </div>
                  </div>

                  <div>
                    <Label htmlFor="paymentAmount">Payment Amount *</Label>
                    <Input
                      id="paymentAmount"
                      type="number"
                      value={paymentAmount}
                      onChange={(e) => setPaymentAmount(parseFloat(e.target.value) || 0)}
                      min="0.01"
                      max={selectedInvoice.amountDue}
                      step="0.01"
                      placeholder="0.00"
                    />
                  </div>

                  <div>
                    <Label htmlFor="paymentDate">Payment Date *</Label>
                    <Input
                      id="paymentDate"
                      type="date"
                      value={paymentDate}
                      onChange={(e) => setPaymentDate(e.target.value)}
                    />
                  </div>

                  <div>
                    <Label htmlFor="paymentMethod">Payment Method *</Label>
                    <select
                      id="paymentMethod"
                      value={paymentMethod}
                      onChange={(e) => setPaymentMethod(e.target.value as any)}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md"
                    >
                      <option value="bank_transfer">Bank Transfer</option>
                      <option value="cash">Cash</option>
                      <option value="check">Check</option>
                      <option value="card">Card</option>
                      <option value="other">Other</option>
                    </select>
                  </div>

                  <div>
                    <Label htmlFor="paymentReference">Reference</Label>
                    <Input
                      id="paymentReference"
                      value={paymentReference}
                      onChange={(e) => setPaymentReference(e.target.value)}
                      placeholder="Transaction reference..."
                    />
                  </div>

                  <div>
                    <Label htmlFor="paymentNotes">Notes</Label>
                    <Textarea
                      id="paymentNotes"
                      value={paymentNotes}
                      onChange={(e) => setPaymentNotes(e.target.value)}
                      placeholder="Payment notes..."
                      rows={2}
                    />
                  </div>
                </div>
              )}

              <DialogFooter>
                <Button
                  variant="outline"
                  onClick={() => {
                    setIsPaymentDialogOpen(false);
                    setSelectedInvoice(null);
                  }}
                  disabled={isSubmitting}
                >
                  Cancel
                </Button>
                <Button onClick={handleRecordPayment} disabled={isSubmitting || paymentAmount <= 0}>
                  {isSubmitting ? 'Recording...' : 'Record Payment'}
                </Button>
              </DialogFooter>
            </DialogContent>
          </Dialog>

          {/* View Dialog */}
          <Dialog open={isViewDialogOpen} onOpenChange={setIsViewDialogOpen}>
            <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto">
              <DialogHeader>
                <DialogTitle>Invoice Details</DialogTitle>
                <DialogDescription>
                  View complete invoice information and payment history
                </DialogDescription>
              </DialogHeader>

              {selectedInvoice && (
                <div className="space-y-6">
                  <div className="grid grid-cols-2 gap-4">
                    <div>
                      <Label className="text-gray-500">Invoice Number</Label>
                      <p className="font-medium">{selectedInvoice.invoiceNumber}</p>
                    </div>
                    <div>
                      <Label className="text-gray-500">Customer</Label>
                      <p className="font-medium">{selectedInvoice.customerName}</p>
                    </div>
                    <div>
                      <Label className="text-gray-500">Status</Label>
                      <Badge className={getStatusColor(selectedInvoice.status)}>
                        {selectedInvoice.status.charAt(0).toUpperCase() + selectedInvoice.status.slice(1)}
                      </Badge>
                    </div>
                    <div>
                      <Label className="text-gray-500">Invoice Date</Label>
                      <p className="font-medium">{new Date(selectedInvoice.invoiceDate).toLocaleDateString()}</p>
                    </div>
                    <div>
                      <Label className="text-gray-500">Due Date</Label>
                      <p className={`font-medium ${isOverdue(selectedInvoice) ? 'text-red-600' : ''}`}>
                        {new Date(selectedInvoice.dueDate).toLocaleDateString()}
                      </p>
                    </div>
                    <div>
                      <Label className="text-gray-500">Payment Terms</Label>
                      <p className="font-medium">{selectedInvoice.paymentTerms} days</p>
                    </div>
                  </div>

                  {/* Financial Summary */}
                  <div className="bg-gray-50 p-4 rounded-lg">
                    <div className="grid grid-cols-3 gap-4">
                      <div>
                        <Label className="text-gray-500 text-sm">Total Amount</Label>
                        <p className="text-lg font-bold">{selectedInvoice.currency} {selectedInvoice.totalAmount.toLocaleString()}</p>
                      </div>
                      <div>
                        <Label className="text-gray-500 text-sm">Amount Paid</Label>
                        <p className="text-lg font-bold text-green-600">{selectedInvoice.currency} {selectedInvoice.amountPaid.toLocaleString()}</p>
                      </div>
                      <div>
                        <Label className="text-gray-500 text-sm">Amount Due</Label>
                        <p className="text-lg font-bold text-orange-600">{selectedInvoice.currency} {selectedInvoice.amountDue.toLocaleString()}</p>
                      </div>
                    </div>
                  </div>

                  {/* Line Items */}
                  <div>
                    <h3 className="font-medium text-lg mb-4">Line Items</h3>
                    <div className="border rounded-lg overflow-hidden">
                      <table className="w-full">
                        <thead className="bg-gray-50">
                          <tr>
                            <th className="text-left py-2 px-4 text-sm font-medium text-gray-500">Description</th>
                            <th className="text-right py-2 px-4 text-sm font-medium text-gray-500">Quantity</th>
                            <th className="text-right py-2 px-4 text-sm font-medium text-gray-500">Unit Price</th>
                            <th className="text-right py-2 px-4 text-sm font-medium text-gray-500">Amount</th>
                          </tr>
                        </thead>
                        <tbody>
                          {selectedInvoice.lineItems.map((item) => (
                            <tr key={item.id} className="border-t">
                              <td className="py-2 px-4">{item.description}</td>
                              <td className="py-2 px-4 text-right">{item.quantity}</td>
                              <td className="py-2 px-4 text-right">
                                {selectedInvoice.currency} {item.unitPrice.toFixed(2)}
                              </td>
                              <td className="py-2 px-4 text-right font-medium">
                                {selectedInvoice.currency} {item.amount.toFixed(2)}
                              </td>
                            </tr>
                          ))}
                        </tbody>
                        <tfoot className="bg-gray-50 border-t-2">
                          <tr>
                            <td colSpan={3} className="py-2 px-4 text-right font-medium">Subtotal:</td>
                            <td className="py-2 px-4 text-right font-medium">
                              {selectedInvoice.currency} {selectedInvoice.subtotal.toFixed(2)}
                            </td>
                          </tr>
                          <tr>
                            <td colSpan={3} className="py-2 px-4 text-right font-medium">Tax:</td>
                            <td className="py-2 px-4 text-right font-medium">
                              {selectedInvoice.currency} {selectedInvoice.taxAmount.toFixed(2)}
                            </td>
                          </tr>
                          <tr>
                            <td colSpan={3} className="py-2 px-4 text-right font-bold">Total:</td>
                            <td className="py-2 px-4 text-right font-bold text-lg">
                              {selectedInvoice.currency} {selectedInvoice.totalAmount.toFixed(2)}
                            </td>
                          </tr>
                        </tfoot>
                      </table>
                    </div>
                  </div>

                  {/* Payment History */}
                  {selectedInvoice.paymentHistory && selectedInvoice.paymentHistory.length > 0 && (
                    <div>
                      <h3 className="font-medium text-lg mb-4">Payment History</h3>
                      <div className="space-y-2">
                        {selectedInvoice.paymentHistory.map((payment) => (
                          <div key={payment.id} className="flex justify-between items-center p-3 bg-green-50 rounded-lg">
                            <div>
                              <p className="font-medium">{selectedInvoice.currency} {payment.amount.toLocaleString()}</p>
                              <p className="text-sm text-gray-600">
                                {payment.paymentMethod.replace('_', ' ').toUpperCase()} - {new Date(payment.paymentDate).toLocaleDateString()}
                              </p>
                              {payment.reference && (
                                <p className="text-xs text-gray-500">Ref: {payment.reference}</p>
                              )}
                            </div>
                            <CheckCircle2 className="h-5 w-5 text-green-600" />
                          </div>
                        ))}
                      </div>
                    </div>
                  )}

                  <DialogFooter>
                    <Button variant="outline" onClick={() => setIsViewDialogOpen(false)}>
                      Close
                    </Button>
                    {selectedInvoice.status !== 'paid' && selectedInvoice.status !== 'cancelled' && (
                      <Button onClick={() => {
                        setIsViewDialogOpen(false);
                        openPaymentDialog(selectedInvoice);
                      }}>
                        <DollarSign className="h-4 w-4 mr-2" />
                        Record Payment
                      </Button>
                    )}
                  </DialogFooter>
                </div>
              )}
            </DialogContent>
          </Dialog>

          {/* Delete Confirmation Dialog */}
          <AlertDialog open={isDeleteDialogOpen} onOpenChange={setIsDeleteDialogOpen}>
            <AlertDialogContent>
              <AlertDialogHeader>
                <AlertDialogTitle>Cancel Invoice?</AlertDialogTitle>
                <AlertDialogDescription>
                  This will mark the invoice as cancelled. This action cannot be undone.
                  {selectedInvoice && (
                    <div className="mt-4 p-4 bg-gray-50 rounded-md">
                      <p className="font-medium">{selectedInvoice.invoiceNumber}</p>
                      <p className="text-sm text-gray-600">{selectedInvoice.customerName}</p>
                    </div>
                  )}
                </AlertDialogDescription>
              </AlertDialogHeader>
              <AlertDialogFooter>
                <AlertDialogCancel disabled={isSubmitting}>Cancel</AlertDialogCancel>
                <AlertDialogAction
                  onClick={handleDelete}
                  disabled={isSubmitting}
                  className="bg-red-600 hover:bg-red-700"
                >
                  {isSubmitting ? 'Cancelling...' : 'Cancel Invoice'}
                </AlertDialogAction>
              </AlertDialogFooter>
            </AlertDialogContent>
          </AlertDialog>
        </div>
      </WorkspaceLayout>
    </ProtectedRoute>
  );
}
