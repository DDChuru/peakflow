rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user has a specific role
    function hasRole(role) {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        role in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles;
    }
    
    // Helper function to check if user is admin
    function isAdmin() {
      return hasRole('admin');
    }
    
    // Helper function to check if user is developer
    function isDeveloper() {
      return hasRole('developer');
    }
    
    // Helper function to check if user can manage companies
    function canManageCompanies() {
      return isAdmin() || isDeveloper();
    }
    
    // Users collection
    match /users/{userId} {
      // Users can read their own data
      allow read: if isAuthenticated() && request.auth.uid == userId;
      
      // Users can update their own data (except roles and companyId)
      allow update: if isAuthenticated() && 
        request.auth.uid == userId &&
        (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['roles', 'companyId']));
      
      // Only admins can read all users
      allow read: if isAdmin();
      
      // Only admins can create or delete users
      allow create, delete: if isAdmin();
      
      // Only admins can update any user (including roles and companyId)
      allow update: if isAdmin();
      
      // Allow user creation during signup
      allow create: if isAuthenticated() && request.auth.uid == userId;
    }
    
    // Companies collection
    match /companies/{companyId} {
      // All authenticated users can read companies
      allow read: if isAuthenticated();

      // Only admins and developers can create companies
      allow create: if canManageCompanies();

      // Users belonging to company can update config fields (currency, VAT)
      // Only admins and developers can update other fields
      allow update: if canManageCompanies() ||
        (belongsToCompany(companyId) &&
         request.resource.data.diff(resource.data).affectedKeys()
           .hasOnly(['defaultCurrency', 'vatPercentage', 'updatedAt']));

      // Only admins can delete companies
      allow delete: if isAdmin();
    }
    
    // Rate limits collection
    match /rateLimits/{document} {
      // Allow authenticated users to read/write their own rate limit entries
      allow read, write: if isAuthenticated();
    }
    
    // Password reset codes collection
    match /passwordResetCodes/{document} {
      // Allow authenticated users to read/write password reset codes
      allow read, write: if isAuthenticated();
    }
    
    // Activities collection for audit trail
    match /activities/{activityId} {
      // Allow authenticated users to read activities
      allow read: if isAuthenticated();

      // Only admins and developers can write activities
      allow create: if canManageCompanies();

      // Activities cannot be updated or deleted (audit trail integrity)
      allow update, delete: if false;
    }

    // Bank statements collection
    match /bank_statements/{statementId} {
      // Users can read statements for their own company or companies they have access to
      allow read: if isAuthenticated() && (
        canManageCompanies() || // Admins/developers can access all
        resource.data.userId == request.auth.uid || // Owner can access their uploads
        (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyId == resource.data.companyId)
      );

      // Users can create bank statements for their company
      allow create: if isAuthenticated() && (
        canManageCompanies() || // Admins/developers can create for any company
        (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
         request.resource.data.userId == request.auth.uid)
      );

      // Users can update their own bank statements
      allow update: if isAuthenticated() && (
        canManageCompanies() || // Admins/developers can update any
        resource.data.userId == request.auth.uid
      );

      // Users can delete their own bank statements or statements from their company
      allow delete: if isAuthenticated() && (
        canManageCompanies() || // Admins/developers can delete any
        resource.data.userId == request.auth.uid || // Owner can delete their uploads
        (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyId == resource.data.companyId)
      );
    }

    // Usage tracking collection
    match /usage_tracking/{trackingId} {
      // Users can read their own usage data
      allow read: if isAuthenticated() && (
        isAdmin() || // Admins can see all usage
        resource.data.userId == request.auth.uid
      );

      // System can create usage tracking entries
      allow create: if isAuthenticated();

      // No updates or deletes allowed (audit trail)
      allow update, delete: if false;
    }

    // PDF extractions collection (for compatibility with existing PDF extraction)
    match /pdf_extractions/{extractionId} {
      // Users can read their own extractions
      allow read: if isAuthenticated() && (
        isAdmin() || // Admins can see all
        resource.data.userId == request.auth.uid
      );

      // Users can create extractions
      allow create: if isAuthenticated();

      // Users can update their own extractions
      allow update: if isAuthenticated() && (
        isAdmin() ||
        resource.data.userId == request.auth.uid
      );

      // Only admins can delete extractions
      allow delete: if isAdmin();
    }

    // Config collection (for API keys and system configuration)
    match /config/{configId} {
      // Only system/functions can read config (Firebase Functions have admin access)
      // Regular users cannot access API keys and sensitive config
      allow read, write: if false;
    }

        // Accounting charts (tenant-level metadata)
    match /accounting_charts/{chartId} {
      allow read: if canManageCompanies();
      allow create, update, delete: if canManageCompanies();
    }

    // Chart of accounts entries (global collection with tenant field)
    match /accounting_accounts/{accountId} {
      allow read: if canManageCompanies();
      allow create, update, delete: if canManageCompanies();
    }

// ====================================================================
    // MULTI-TENANT COMPANY-SCOPED COLLECTIONS (CSC Pattern)
    // ====================================================================

    // Helper function to check if user belongs to a specific company
    function belongsToCompany(companyId) {
      return isAuthenticated() &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyId == companyId;
    }

    // Helper function to check if user is admin of a specific company
    function isCompanyAdmin(companyId) {
      return belongsToCompany(companyId) && hasRole('admin');
    }

    // Company-scoped collections
    match /companies/{companyId} {

      // Bank accounts collection
      match /bankAccounts/{bankAccountId} {
        allow read: if belongsToCompany(companyId) || canManageCompanies();
        allow create, update, delete: if canManageCompanies();
      }

      // Bank transfers collection
      match /bankTransfers/{transferId} {
        allow read: if belongsToCompany(companyId) || canManageCompanies();
        allow create, update, delete: if canManageCompanies();
      }

      // Bank statements collection (company-scoped)
      match /bankStatements/{statementId} {
        allow read: if belongsToCompany(companyId) || canManageCompanies();
        allow create: if belongsToCompany(companyId);
        allow update: if belongsToCompany(companyId) || canManageCompanies();
        allow delete: if belongsToCompany(companyId) || canManageCompanies();
      }

      // Ledger entries collection
      match /ledgerEntries/{ledgerEntryId} {
        allow read: if belongsToCompany(companyId) || canManageCompanies();
        allow create, update: if canManageCompanies();
        allow delete: if false; // Ledger entries should never be deleted
      }

      // Journal entries collection
      match /journalEntries/{journalId} {
        allow read: if belongsToCompany(companyId) || canManageCompanies();
        allow create, update: if canManageCompanies();
        allow delete: if false; // Journal entries should never be deleted
      }

      // Reconciliations collection with proper subcollections
      match /reconciliations/{sessionId} {
        allow read: if belongsToCompany(companyId) || canManageCompanies();
        allow create: if belongsToCompany(companyId);
        allow update: if belongsToCompany(companyId) || canManageCompanies();
        allow delete: if canManageCompanies();

        // Reconciliation matches subcollection
        match /matches/{matchId} {
          allow read: if belongsToCompany(companyId) || canManageCompanies();
          allow create, update: if belongsToCompany(companyId) || canManageCompanies();
          allow delete: if belongsToCompany(companyId) || canManageCompanies();
        }

        // Reconciliation adjustments subcollection
        match /adjustments/{adjustmentId} {
          allow read: if belongsToCompany(companyId) || canManageCompanies();
          allow create, update: if belongsToCompany(companyId) || canManageCompanies();
          allow delete: if canManageCompanies();
        }
      }

      // Debtors collection - scoped to company
      match /debtors/{debtorId} {
        // Users can only read debtors from their own company
        allow read: if belongsToCompany(companyId) || canManageCompanies();

        // Users can create debtors for their own company
        allow create: if belongsToCompany(companyId) &&
          request.resource.data.companyId == companyId &&
          request.resource.data.createdBy == request.auth.uid;

        // Users can update debtors in their company (but not change companyId)
        allow update: if belongsToCompany(companyId) &&
          resource.data.companyId == companyId &&
          (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['companyId', 'id', 'createdAt', 'createdBy']));

        // Only company admins can delete debtors
        allow delete: if isCompanyAdmin(companyId);
      }

      // Creditors collection - scoped to company
      match /creditors/{creditorId} {
        // Users can only read creditors from their own company
        allow read: if belongsToCompany(companyId) || canManageCompanies();

        // Users can create creditors for their own company
        allow create: if belongsToCompany(companyId) &&
          request.resource.data.companyId == companyId &&
          request.resource.data.createdBy == request.auth.uid;

        // Users can update creditors in their company (but not change companyId)
        allow update: if belongsToCompany(companyId) &&
          resource.data.companyId == companyId &&
          (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['companyId', 'id', 'createdAt', 'createdBy']));

        // Only company admins can delete creditors
        allow delete: if isCompanyAdmin(companyId);
      }

      // Transactions collection - scoped to company
      match /transactions/{transactionId} {
        // Users can only read transactions from their own company
        allow read: if belongsToCompany(companyId);

        // Users can create transactions for their own company
        allow create: if belongsToCompany(companyId) &&
          request.resource.data.companyId == companyId &&
          request.resource.data.createdBy == request.auth.uid;

        // Users can update transactions (status, dates) but not core fields
        allow update: if belongsToCompany(companyId) &&
          resource.data.companyId == companyId &&
          (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['companyId', 'id', 'createdAt', 'createdBy', 'amount', 'entityId', 'entityType']));

        // Only company admins can delete transactions
        allow delete: if isCompanyAdmin(companyId);
      }

      // Cash flow forecasts collection
      match /cashFlowForecasts/{forecastId} {
        allow read: if belongsToCompany(companyId) || canManageCompanies();
        allow create, update: if belongsToCompany(companyId) || canManageCompanies();
        allow delete: if canManageCompanies();
      }

      // Chart of accounts for company
      match /chartOfAccounts/{accountId} {
        allow read: if belongsToCompany(companyId) || canManageCompanies();
        allow create, update, delete: if canManageCompanies();
      }

      // GL Mapping Rules for bank-to-ledger import
      match /glMappingRules/{ruleId} {
        allow read: if belongsToCompany(companyId) || canManageCompanies();
        allow create, update, delete: if canManageCompanies();
      }

      // Configuration subcollection (industry settings, feature flags, etc.)
      match /configuration/{configDoc} {
        allow read: if belongsToCompany(companyId) || canManageCompanies();
        allow create, update, delete: if canManageCompanies();
      }

      // Service Level Agreements (SLAs) collection - named serviceAgreements in the code
      match /serviceAgreements/{slaId} {
        // Users can read SLAs from their own company
        allow read: if belongsToCompany(companyId) || canManageCompanies();

        // Users can create SLAs for their own company
        allow create: if belongsToCompany(companyId) &&
          request.resource.data.companyId == companyId;

        // Users can update SLAs in their company
        allow update: if belongsToCompany(companyId) &&
          resource.data.companyId == companyId;

        // Only company admins can delete SLAs
        allow delete: if isCompanyAdmin(companyId) || canManageCompanies();

        // SLA line items subcollection
        match /lineItems/{lineItemId} {
          allow read: if belongsToCompany(companyId) || canManageCompanies();
          allow create, update: if belongsToCompany(companyId) || canManageCompanies();
          allow delete: if isCompanyAdmin(companyId) || canManageCompanies();
        }

        // SLA history/audit subcollection
        match /history/{historyId} {
          allow read: if belongsToCompany(companyId) || canManageCompanies();
          allow create: if belongsToCompany(companyId) || canManageCompanies();
          allow update, delete: if false; // History should be immutable
        }
      }

      // Invoices collection (for SLA-generated and ad-hoc invoices)
      match /invoices/{invoiceId} {
        // Users can read invoices from their own company
        allow read: if belongsToCompany(companyId) || canManageCompanies();

        // Users can create invoices for their own company
        allow create: if belongsToCompany(companyId) &&
          request.resource.data.companyId == companyId;

        // Users can update invoices (e.g., status, payment info)
        allow update: if belongsToCompany(companyId) &&
          resource.data.companyId == companyId;

        // Only company admins can delete invoices
        allow delete: if isCompanyAdmin(companyId) || canManageCompanies();

        // Invoice line items subcollection
        match /lineItems/{lineItemId} {
          allow read: if belongsToCompany(companyId) || canManageCompanies();
          allow create, update: if belongsToCompany(companyId) || canManageCompanies();
          allow delete: if isCompanyAdmin(companyId) || canManageCompanies();
        }

        // Invoice payments subcollection
        match /payments/{paymentId} {
          allow read: if belongsToCompany(companyId) || canManageCompanies();
          allow create: if belongsToCompany(companyId) || canManageCompanies();
          allow update: if belongsToCompany(companyId) || canManageCompanies();
          allow delete: if false; // Payments should not be deleted
        }
      }

      // Quotes collection
      match /quotes/{quoteId} {
        // Users can read quotes from their own company
        allow read: if belongsToCompany(companyId) || canManageCompanies();

        // Users can create quotes for any company (workspace access checked in app)
        allow create: if isAuthenticated() &&
          request.resource.data.companyId == companyId;

        // Users can update quotes in their company
        allow update: if belongsToCompany(companyId) &&
          resource.data.companyId == companyId;

        // Only company admins can delete quotes
        allow delete: if isCompanyAdmin(companyId) || canManageCompanies();
      }

      // Sales orders collection
      match /salesOrders/{salesOrderId} {
        // Users can read sales orders from their own company
        allow read: if belongsToCompany(companyId) || canManageCompanies();

        // Users can create sales orders for their own company
        allow create: if belongsToCompany(companyId) &&
          request.resource.data.companyId == companyId;

        // Users can update sales orders
        allow update: if belongsToCompany(companyId) &&
          resource.data.companyId == companyId;

        // Only company admins can delete sales orders
        allow delete: if isCompanyAdmin(companyId) || canManageCompanies();
      }

      // Company audit logs - read-only for users
      match /auditLogs/{logId} {
        // Only company admins can read audit logs
        allow read: if isCompanyAdmin(companyId);

        // System-only writes (through Cloud Functions)
        allow write: if false;
      }
    }
  }
}